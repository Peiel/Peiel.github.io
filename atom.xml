<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Peiel&#39;s Blog</title>
  
  <subtitle>大其愿 坚其志 虚其心 柔其气</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.peierlong.com/"/>
  <updated>2019-12-19T03:32:30.499Z</updated>
  <id>http://www.peierlong.com/</id>
  
  <author>
    <name>Peiel</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>GitHub图片加载不稳定解决办法</title>
    <link href="http://www.peierlong.com/2019/12/19/GitHub%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E4%B8%8D%E7%A8%B3%E5%AE%9A%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>http://www.peierlong.com/2019/12/19/GitHub图片加载不稳定解决办法/</id>
    <published>2019-12-19T03:25:41.000Z</published>
    <updated>2019-12-19T03:32:30.499Z</updated>
    
    <content type="html"><![CDATA[<p>打开控制台，发现图片的Get请求部分请求被拒绝。<br><img src="http://peierlong-blog.oss-cn-hongkong.aliyuncs.com/oMNqFJ.png" alt="img"></p><h2 id="分析原因："><a href="#分析原因：" class="headerlink" title="分析原因："></a>分析原因：</h2><ol><li>有可能时本地代理拦截了请求</li><li>有可能DNS被污染了</li></ol><h2 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h2><ol><li>检查修改本地代理的配置</li><li>配置host</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;打开控制台，发现图片的Get请求部分请求被拒绝。&lt;br&gt;&lt;img src=&quot;http://peierlong-blog.oss-cn-hongkong.aliyuncs.com/oMNqFJ.png&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;分析原因：&quot;&gt;&lt;a hre
      
    
    </summary>
    
      <category term="GitHub" scheme="http://www.peierlong.com/categories/GitHub/"/>
    
    
      <category term="Git" scheme="http://www.peierlong.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>递归的理解</title>
    <link href="http://www.peierlong.com/2019/04/12/%E9%80%92%E5%BD%92%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>http://www.peierlong.com/2019/04/12/递归的理解/</id>
    <published>2019-04-12T12:33:17.000Z</published>
    <updated>2019-04-18T02:37:11.440Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是递归"><a href="#什么是递归" class="headerlink" title="什么是递归"></a>什么是递归</h2><p>方法或函数调用自身的方式称之为递归，调用成为递，返回称为归。</p><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p>优点：代码简洁表达能力强。<br>缺点：空间复杂度高，栈溢出，存在重复计算。</p><a id="more"></a><h2 id="递归使用场景"><a href="#递归使用场景" class="headerlink" title="递归使用场景"></a>递归使用场景</h2><p>满足以下三个条件，就可以使用递归：</p><ol><li>问题的解可以分解为几个子问题的解，何为子问题？就是数据规模更小的问题。</li><li>问题与子问题，除了数据规模不同，求解思路完全一样。</li><li>存在递归终止条件。</li></ol><h2 id="如何实现"><a href="#如何实现" class="headerlink" title="如何实现"></a>如何实现</h2><h3 id="1-编写"><a href="#1-编写" class="headerlink" title="1. 编写"></a>1. 编写</h3><p>关键是找到如何将大问题分解为小问题的规律，写出递归公式，推敲终止条件，最后翻译成实际的代码。</p><h3 id="2-理解"><a href="#2-理解" class="headerlink" title="2. 理解"></a>2. 理解</h3><p>避免思维误区：不要试图去想清楚整个递和归的过程。<br>那怎么想？如果问题 A 可以分解为 B、C、D 三个子问题，可以假设 B、C、D 已经解决。只需要思考问题 A 和 子问题之间的关系即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是递归&quot;&gt;&lt;a href=&quot;#什么是递归&quot; class=&quot;headerlink&quot; title=&quot;什么是递归&quot;&gt;&lt;/a&gt;什么是递归&lt;/h2&gt;&lt;p&gt;方法或函数调用自身的方式称之为递归，调用成为递，返回称为归。&lt;/p&gt;
&lt;h2 id=&quot;优缺点&quot;&gt;&lt;a href=&quot;#优缺点&quot; class=&quot;headerlink&quot; title=&quot;优缺点&quot;&gt;&lt;/a&gt;优缺点&lt;/h2&gt;&lt;p&gt;优点：代码简洁表达能力强。&lt;br&gt;缺点：空间复杂度高，栈溢出，存在重复计算。&lt;/p&gt;
    
    </summary>
    
      <category term="Algorithms" scheme="http://www.peierlong.com/categories/Algorithms/"/>
    
    
      <category term="Algorithms" scheme="http://www.peierlong.com/tags/Algorithms/"/>
    
  </entry>
  
  <entry>
    <title>《暗时间》读书笔记</title>
    <link href="http://www.peierlong.com/2019/04/11/%E3%80%8A%E6%9A%97%E6%97%B6%E9%97%B4%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://www.peierlong.com/2019/04/11/《暗时间》读书笔记/</id>
    <published>2019-04-11T12:15:50.000Z</published>
    <updated>2019-04-12T02:16:30.258Z</updated>
    
    <content type="html"><![CDATA[<h1 id="《暗时间》读书笔记"><a href="#《暗时间》读书笔记" class="headerlink" title="《暗时间》读书笔记"></a>《暗时间》读书笔记</h1><h2 id="什么是暗时间？"><a href="#什么是暗时间？" class="headerlink" title="什么是暗时间？"></a>什么是暗时间？</h2><p>简单来讲，就是我们对时间利用的效率，在一般情况下，我们在做某一些事的时候，几乎不用大脑来思考，这个时候利用这个时间来思考一些事情，我们的时间的效率就会提高。</p><a id="more"></a><h2 id="学习和思考"><a href="#学习和思考" class="headerlink" title="学习和思考"></a>学习和思考</h2><ul><li>看书只看经典</li><li>笔记 &amp; 博客</li><li>Google &amp; wiki</li><li>重要的事情优先做</li></ul><h2 id="阅读和思考"><a href="#阅读和思考" class="headerlink" title="阅读和思考"></a>阅读和思考</h2><ul><li>有的地方快点儿读，有的地方慢点读。</li><li>重点知识点多本书联合起来一起读。</li><li>“三天打渔，俩天晒网。”会变成“天天晒网，永不打渔。”</li></ul><p>end！</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;《暗时间》读书笔记&quot;&gt;&lt;a href=&quot;#《暗时间》读书笔记&quot; class=&quot;headerlink&quot; title=&quot;《暗时间》读书笔记&quot;&gt;&lt;/a&gt;《暗时间》读书笔记&lt;/h1&gt;&lt;h2 id=&quot;什么是暗时间？&quot;&gt;&lt;a href=&quot;#什么是暗时间？&quot; class=&quot;headerlink&quot; title=&quot;什么是暗时间？&quot;&gt;&lt;/a&gt;什么是暗时间？&lt;/h2&gt;&lt;p&gt;简单来讲，就是我们对时间利用的效率，在一般情况下，我们在做某一些事的时候，几乎不用大脑来思考，这个时候利用这个时间来思考一些事情，我们的时间的效率就会提高。&lt;/p&gt;
    
    </summary>
    
      <category term="读书" scheme="http://www.peierlong.com/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>Java NIO 之 FileChannel 的使用</title>
    <link href="http://www.peierlong.com/2019/03/22/Java-NIO-%E4%B9%8B-FileChannel-%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.peierlong.com/2019/03/22/Java-NIO-之-FileChannel-的使用/</id>
    <published>2019-03-22T13:19:11.000Z</published>
    <updated>2019-03-22T08:20:26.281Z</updated>
    
    <content type="html"><![CDATA[<h2 id="通过文件获取-FileChannel-实例"><a href="#通过文件获取-FileChannel-实例" class="headerlink" title="通过文件获取 FileChannel 实例"></a>通过文件获取 FileChannel 实例</h2><h3 id="1-从-FileInputstream-中获取"><a href="#1-从-FileInputstream-中获取" class="headerlink" title="1. 从 FileInputstream 中获取"></a>1. 从 FileInputstream 中获取</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"/Users/peiel/a.txt"</span>);</span><br><span class="line">FileChannel fileChannel = fis.getChannel();</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="2-使用-RandomAccessFile-获取"><a href="#2-使用-RandomAccessFile-获取" class="headerlink" title="2. 使用 RandomAccessFile 获取"></a>2. 使用 RandomAccessFile 获取</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RandomAccessFile fis = <span class="keyword">new</span> RandomAccessFile(<span class="string">"/Users/peiel/a.txt"</span>, <span class="string">"rw"</span>);</span><br><span class="line">FileChannel fileChannel = fis.getChannel();</span><br></pre></td></tr></table></figure><h2 id="打印读取-FileChannel-中的内容"><a href="#打印读取-FileChannel-中的内容" class="headerlink" title="打印读取 FileChannel 中的内容"></a>打印读取 FileChannel 中的内容</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ByteBuffer buf = ByteBuffer.allocate(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line"><span class="keyword">while</span> ((len = fileChannel.read(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// flip buf (limit = position; position = 0;)</span></span><br><span class="line">    buf.flip();</span><br><span class="line">    <span class="comment">// 方式一：转换成数组读取的方式</span></span><br><span class="line">    System.out.print(<span class="keyword">new</span> String(buf.array(), <span class="number">0</span>, len));</span><br><span class="line">    <span class="comment">// 方式二：直接读取的方式</span></span><br><span class="line">    <span class="keyword">while</span> (buf.hasRemaining()) &#123;</span><br><span class="line">        System.out.print((<span class="keyword">char</span>) buf.get());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// clear    </span></span><br><span class="line">    buf.clear();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="写入数据到文件中"><a href="#写入数据到文件中" class="headerlink" title="写入数据到文件中"></a>写入数据到文件中</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">String newData = <span class="string">"This is a boy!"</span>;</span><br><span class="line"></span><br><span class="line">ByteBuffer byteBuffer = ByteBuffer.allocate(<span class="number">16</span>);</span><br><span class="line">byteBuffer.clear();</span><br><span class="line">byteBuffer.put(newData.getBytes());</span><br><span class="line"></span><br><span class="line">byteBuffer.flip();</span><br><span class="line"><span class="keyword">while</span> (byteBuffer.hasRemaining()) &#123;</span><br><span class="line">    fileChannel.write(byteBuffer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;通过文件获取-FileChannel-实例&quot;&gt;&lt;a href=&quot;#通过文件获取-FileChannel-实例&quot; class=&quot;headerlink&quot; title=&quot;通过文件获取 FileChannel 实例&quot;&gt;&lt;/a&gt;通过文件获取 FileChannel 实例&lt;/h2&gt;&lt;h3 id=&quot;1-从-FileInputstream-中获取&quot;&gt;&lt;a href=&quot;#1-从-FileInputstream-中获取&quot; class=&quot;headerlink&quot; title=&quot;1. 从 FileInputstream 中获取&quot;&gt;&lt;/a&gt;1. 从 FileInputstream 中获取&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;FileInputStream fis = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; FileInputStream(&lt;span class=&quot;string&quot;&gt;&quot;/Users/peiel/a.txt&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FileChannel fileChannel = fis.getChannel();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Java" scheme="http://www.peierlong.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://www.peierlong.com/tags/Java/"/>
    
      <category term="JVM" scheme="http://www.peierlong.com/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 问题修复记录</title>
    <link href="http://www.peierlong.com/2019/03/12/hexo-problem-fix/"/>
    <id>http://www.peierlong.com/2019/03/12/hexo-problem-fix/</id>
    <published>2019-03-12T13:37:52.000Z</published>
    <updated>2019-03-14T02:07:06.567Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装-nvm"><a href="#安装-nvm" class="headerlink" title="安装 nvm"></a>安装 nvm</h2><ol><li><code>curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash</code></li><li>配置环境变量</li></ol><a id="more"></a><h2 id="使用-nvm-快捷安装-node"><a href="#使用-nvm-快捷安装-node" class="headerlink" title="使用 nvm 快捷安装 node"></a>使用 nvm 快捷安装 node</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install 6.17.0</span><br></pre></td></tr></table></figure><h2 id="报错解决"><a href="#报错解决" class="headerlink" title="报错解决"></a>报错解决</h2><h3 id="错误1"><a href="#错误1" class="headerlink" title="错误1"></a>错误1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR Plugin load failed: hexo-renderer-sass</span><br></pre></td></tr></table></figure><h3 id="解决1"><a href="#解决1" class="headerlink" title="解决1"></a>解决1</h3><p>使用brew安装系统 <code>libsass</code> 依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew reinstall libsass</span><br></pre></td></tr></table></figure><h3 id="错误2"><a href="#错误2" class="headerlink" title="错误2"></a>错误2</h3><p>node版本与编译版本不一致导致失败</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Error: The module &apos;/usr/local/lib/node_modules/hexo/node_modules/dtrace-provider/build/Release/DTraceProviderBindings.node&apos;</span><br><span class="line">was compiled against a different Node.js version using</span><br><span class="line">NODE_MODULE_VERSION 48. This version of Node.js requires</span><br><span class="line">NODE_MODULE_VERSION 67. Please try re-compiling or re-installing</span><br></pre></td></tr></table></figure><h3 id="解决2"><a href="#解决2" class="headerlink" title="解决2"></a>解决2</h3><p>根据错误日志，查看版本号48的node版本，<a href="https://nodejs.org/zh-cn/download/releases/" target="_blank" rel="noopener">点击查看链接</a></p><p><img src="http://peierlong-blog.oss-cn-hongkong.aliyuncs.com/node_verison.jpg" alt="node_verison.jpg"></p><p>使用nvm安装对应版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install 6.17.0</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>hexo 不能使用的主要原因还是设备更换的原因，更换设备注意同步node版本，环境依赖，就不会出问题。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装-nvm&quot;&gt;&lt;a href=&quot;#安装-nvm&quot; class=&quot;headerlink&quot; title=&quot;安装 nvm&quot;&gt;&lt;/a&gt;安装 nvm&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;配置环境变量&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://www.peierlong.com/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://www.peierlong.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>我的书单</title>
    <link href="http://www.peierlong.com/2019/02/14/%E6%88%91%E7%9A%84%E4%B9%A6%E5%8D%95/"/>
    <id>http://www.peierlong.com/2019/02/14/我的书单/</id>
    <published>2019-02-14T11:56:04.000Z</published>
    <updated>2019-03-14T02:02:22.392Z</updated>
    
    <content type="html"><![CDATA[<h2 id="语言相关"><a href="#语言相关" class="headerlink" title="语言相关"></a>语言相关</h2><ul><li>《Java编程思想》</li><li>《深入理解JVM》★★★★★</li></ul><a id="more"></a><ul><li>《Java 并发编程实战》★★★★★</li><li>《深入理解Java虚拟机》★★★★★</li><li>《Effective Java》★★★★★</li><li>《Head First Python》</li><li>《C程序设计语言(第二版新版)》</li><li>《汇编语言(第三版)》</li><li>《深入分析Java Web技术内幕》</li><li>《Java并发编程的艺术》★★★★☆</li></ul><h2 id="计算机基础与网络"><a href="#计算机基础与网络" class="headerlink" title="计算机基础与网络"></a>计算机基础与网络</h2><ul><li>《深入理解计算机系统》</li><li><a href="http://book.douban.com/subject/6097773/" target="_blank" rel="noopener">《Linux内核设计与实现 第3版》</a></li><li><a href="http://book.douban.com/subject/26268767/" target="_blank" rel="noopener">《WireShark网络分析就这么简单》</a></li><li><a href="http://book.douban.com/subject/26710788/" target="_blank" rel="noopener">《WireShark网络分析的艺术》</a></li><li>《TCP/IP详解(卷一：协议)》</li><li>《图解TCP/IP(第五版)》 </li><li>《HTTP权威指南》</li><li>《程序员的数学》（1基础 2统计 3线性代数）</li></ul><h2 id="开源框架与具体技术"><a href="#开源框架与具体技术" class="headerlink" title="开源框架与具体技术"></a>开源框架与具体技术</h2><ul><li>《Hadoop权威指南》</li><li>《Netty权威指南》</li><li>《从PAXOS到ZOOKEEPER分布式一致性原理与实践》</li><li><a href="http://book.douban.com/subject/26593175/" target="_blank" rel="noopener">《Docker: 容器与容器云》</a></li><li><a href="http://book.douban.com/subject/26702824/" target="_blank" rel="noopener">《分布式服务框架：原理与实践》</a></li><li><a href="http://book.douban.com/subject/26649141/" target="_blank" rel="noopener">《Spark技术内幕》</a></li><li>《Mastering Nginx 2nd Edition》</li></ul><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><ul><li>《亿级流量网站架构核心技术》 </li><li>《大型网站技术架构》</li><li>《大型分布式网站架构设计与实践》</li><li>《大型网站系统与Java中间件实践》</li></ul><h2 id="算法与数据结构-amp-设计模式"><a href="#算法与数据结构-amp-设计模式" class="headerlink" title="算法与数据结构 &amp; 设计模式"></a>算法与数据结构 &amp; 设计模式</h2><ul><li>《算法导论》</li><li>《数据结构与算法分析(Java语言描述)》</li><li>《算法4》</li></ul><ul><li>《Head First 设计模式》</li></ul><h2 id="数据库与缓存"><a href="#数据库与缓存" class="headerlink" title="数据库与缓存"></a>数据库与缓存</h2><ul><li>《Redis入门指南》</li><li><a href="http://book.douban.com/subject/25900156/" target="_blank" rel="noopener">《Redis设计与实现分析》</a></li><li>《MongoDB权威指南》</li><li>《MySQL技术内幕  InnoDB存储引擎  第2版》 </li><li>《高性能MySql》★★★★★</li></ul><h2 id="程序员的自我修养"><a href="#程序员的自我修养" class="headerlink" title="程序员的自我修养"></a>程序员的自我修养</h2><ul><li>《Clean Code》</li><li>《敏捷软件开发》</li><li>《重构》</li><li>《程序员修炼之道-从小工到专家》</li><li>《代码大全2》</li></ul><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><ul><li>《HTML秘籍》</li><li>《JavaScript权威指南（第六版）》</li><li>《了不起的Node.js》</li><li>《Node.js开发指南》</li><li>《深入浅出Node.js》</li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li>《技术之瞳》</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;语言相关&quot;&gt;&lt;a href=&quot;#语言相关&quot; class=&quot;headerlink&quot; title=&quot;语言相关&quot;&gt;&lt;/a&gt;语言相关&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;《Java编程思想》&lt;/li&gt;
&lt;li&gt;《深入理解JVM》★★★★★&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="读书" scheme="http://www.peierlong.com/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="书单" scheme="http://www.peierlong.com/tags/%E4%B9%A6%E5%8D%95/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot2.x整合ES2.x报failed to load elasticsearch nodes</title>
    <link href="http://www.peierlong.com/2018/07/18/SpringBoot2.x%E6%95%B4%E5%90%88ES2.x%E6%8A%A5failed-to-load-elasticsearch-nodes/"/>
    <id>http://www.peierlong.com/2018/07/18/SpringBoot2.x整合ES2.x报failed-to-load-elasticsearch-nodes/</id>
    <published>2018-07-18T02:26:16.000Z</published>
    <updated>2019-03-13T02:32:01.040Z</updated>
    
    <content type="html"><![CDATA[<h2 id="在SpringBoot整合ES时，遇到如下错误。"><a href="#在SpringBoot整合ES时，遇到如下错误。" class="headerlink" title="在SpringBoot整合ES时，遇到如下错误。"></a>在SpringBoot整合ES时，遇到如下错误。</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR 2075 --- [           main] .d.e.r.s.AbstractElasticsearchRepository : failed to load elasticsearch nodes : org.elasticsearch.client.transport.NoNodeAvailableException: None of the configured nodes are available:</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a>相关配置</h2><p><code>pom.xml</code>部分配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.0.2.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">&lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-data-elasticsearch&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><code>application.properties</code> ES相关配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.data.elasticsearch.repositories.enabled=true</span><br><span class="line">spring.data.elasticsearch.cluster-nodes=192.168.xxx.xxx\:9300</span><br></pre></td></tr></table></figure><h2 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h2><ul><li>SpringBoot2.0</li><li>ES2.4</li></ul><h2 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h2><p>导致一直解决不了问题的原因是<a href="https://github.com/spring-projects/spring-data-elasticsearch/wiki/Spring-Data-Elasticsearch---Spring-Boot---version-matrix" target="_blank" rel="noopener">这个链接</a>显示SpringBoot2.0是兼容ES2.4的，所以我首先排除了兼容问题。</p><p>网上查找，报这个错的原因是因为IP限制，无论是修改ES的配置中<code>network.host</code>属性为<code>0.0.0.0</code>也好，我链接ES的机器的内网IP也好，<strong>都不好使</strong>。</p><p>之后看到了<a href="https://blog.csdn.net/lusyoe/article/details/80107865" target="_blank" rel="noopener">这篇文章</a>，我再次怀疑有可能版本兼容的问题，修改SpringBoot为<code>1.5.9.RELEASE</code>版本，不报错了。</p><p>这个兼容性问题，要么降级SpringBoot，要么升级ES，还是更新ES比较靠谱。</p><hr><blockquote><p>降级是不能降级的，这辈子都不可能降级</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;在SpringBoot整合ES时，遇到如下错误。&quot;&gt;&lt;a href=&quot;#在SpringBoot整合ES时，遇到如下错误。&quot; class=&quot;headerlink&quot; title=&quot;在SpringBoot整合ES时，遇到如下错误。&quot;&gt;&lt;/a&gt;在SpringBoot整合ES时，遇到如下错误。&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ERROR 2075 --- [           main] .d.e.r.s.AbstractElasticsearchRepository : failed to load elasticsearch nodes : org.elasticsearch.client.transport.NoNodeAvailableException: None of the configured nodes are available:&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Java" scheme="http://www.peierlong.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://www.peierlong.com/tags/Java/"/>
    
      <category term="ES" scheme="http://www.peierlong.com/tags/ES/"/>
    
      <category term="Spring" scheme="http://www.peierlong.com/tags/Spring/"/>
    
      <category term="Spring Boot" scheme="http://www.peierlong.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>HttpClient4.5.3源码浅析(HttpClient的execute方法执行过程)</title>
    <link href="http://www.peierlong.com/2018/06/29/HttpClient4-5-3%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90(HttpClient%E7%9A%84execute%E6%96%B9%E6%B3%95%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B)/"/>
    <id>http://www.peierlong.com/2018/06/29/HttpClient4-5-3源码浅析(HttpClient的execute方法执行过程)/</id>
    <published>2018-06-29T07:07:03.000Z</published>
    <updated>2019-03-13T02:32:01.036Z</updated>
    
    <content type="html"><![CDATA[<p>上一遍总结的<code>HttpClient</code>对象的构造过程，本篇主要总结<code>HttpClient</code>对象的<code>execute()</code>方法的执行流程，我们先看整体的时序图（省略部分细节），然后一步步分析。当不知道流程的时候走debug也是不错的选择。</p><a id="more"></a><p><img src="http://peierlong-blog.oss-cn-hongkong.aliyuncs.com/Xnip2018-06-180_15-08-22.jpg" alt="Xnip2018-06-180_15-08-22.jpg"></p><p>根据上一篇文章我们知道<code>HttpClient</code>实例是使用的子类<code>CloseableHttpClient</code>类初始化而来，所以我们看子类的<code>execute()</code>方法的源代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CloseableHttpResponse <span class="title">execute</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">final</span> HttpUriRequest request)</span> <span class="keyword">throws</span> IOException, ClientProtocolException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> execute(request, (HttpContext) <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CloseableHttpResponse <span class="title">execute</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">final</span> HttpUriRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">final</span> HttpContext context)</span> <span class="keyword">throws</span> IOException, ClientProtocolException </span>&#123;</span><br><span class="line">    Args.notNull(request, <span class="string">"HTTP request"</span>);</span><br><span class="line">    <span class="keyword">return</span> doExecute(determineTarget(request), request, context);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> CloseableHttpResponse <span class="title">doExecute</span><span class="params">(HttpHost target, HttpRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">        HttpContext context)</span> <span class="keyword">throws</span> IOException, ClientProtocolException</span>;</span><br></pre></td></tr></table></figure><p>我们看到调用链调用到了抽象方法<code>doExecute()</code>，上一篇中，我们知道<code>HttpClient</code>对象构建最后，是使用的<code>CloseableHttpClient</code>的子类<code>InternalHttpClient</code>创建的对象，所以我们来看<code>InternalHttpClient</code>类的<code>doExecute()</code>方法的具体实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> CloseableHttpResponse <span class="title">doExecute</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">final</span> HttpHost target,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">final</span> HttpRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">final</span> HttpContext context)</span> <span class="keyword">throws</span> IOException, ClientProtocolException </span>&#123;</span><br><span class="line">    Args.notNull(request, <span class="string">"HTTP request"</span>);</span><br><span class="line">    HttpExecutionAware execAware = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (request <span class="keyword">instanceof</span> HttpExecutionAware) &#123;</span><br><span class="line">        execAware = (HttpExecutionAware) request;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> HttpRequestWrapper wrapper = HttpRequestWrapper.wrap(request, target);</span><br><span class="line">        <span class="keyword">final</span> HttpClientContext localcontext = HttpClientContext.adapt(</span><br><span class="line">                context != <span class="keyword">null</span> ? context : <span class="keyword">new</span> BasicHttpContext());</span><br><span class="line">        RequestConfig config = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (request <span class="keyword">instanceof</span> Configurable) &#123;</span><br><span class="line">            config = ((Configurable) request).getConfig();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (config == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> HttpParams params = request.getParams();</span><br><span class="line">            <span class="keyword">if</span> (params <span class="keyword">instanceof</span> HttpParamsNames) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!((HttpParamsNames) params).getNames().isEmpty()) &#123;</span><br><span class="line">                    config = HttpClientParamConfig.getRequestConfig(params, <span class="keyword">this</span>.defaultConfig);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                config = HttpClientParamConfig.getRequestConfig(params, <span class="keyword">this</span>.defaultConfig);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (config != <span class="keyword">null</span>) &#123;</span><br><span class="line">            localcontext.setRequestConfig(config);</span><br><span class="line">        &#125;</span><br><span class="line">        setupContext(localcontext);</span><br><span class="line">        <span class="keyword">final</span> HttpRoute route = determineRoute(target, wrapper, localcontext);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.execChain.execute(route, wrapper, localcontext, execAware);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> HttpException httpException) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ClientProtocolException(httpException);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码中</p><ol><li><code>HttpExecutionAware</code>类是用于接收阻塞I/O操作的通知。</li><li><code>HttpRequestWrapper</code>类是<code>HttpRequest</code>接口的包装类。</li><li><code>HttpClientContext</code>类实现<code>HttpContext</code>接口，表示HTTP进程的执行状态。</li><li><code>RequestConfig</code>请求配置类，初始化后赋值到了上下文<code>HttpClientContext</code>中。</li><li><code>HttpRoute</code>为路由类。想更深了解可以参考<a href="https://blog.csdn.net/zjysource/article/details/52945494" target="_blank" rel="noopener">这篇文章</a>。</li></ol><hr><p>接下来主要逻辑在<code>MainClientExec</code>的<code>execute()</code>方法，涉及到有关https的auth的内容暂时不做分析。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (request <span class="keyword">instanceof</span> HttpEntityEnclosingRequest) &#123;</span><br><span class="line">    RequestEntityProxy.enhance((HttpEntityEnclosingRequest) request);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是<code>HttpEntityEnclosingRequest</code>类型的requet，则使用Entity代理类进行加强，主要用途是对entity的回收等操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object userToken = context.getUserToken();</span><br></pre></td></tr></table></figure><p>这是<code>HttpClient</code>标识，默认为null，为了保证用户使用链接的唯一性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> ConnectionRequest connRequest = connManager.requestConnection(route, userToken);</span><br></pre></td></tr></table></figure><p>得到一个由<code>connManager</code>管理其生命周期的<code>ConnectionRequest</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (execAware != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (execAware.isAborted()) &#123;</span><br><span class="line">            connRequest.cancel();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RequestAbortedException(<span class="string">"Request aborted"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            execAware.setCancellable(connRequest);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>execAware</code>也实际表示一个封装请求。把当前链接赋值给<code>execAware</code>持有。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> RequestConfig config = context.getRequestConfig();</span><br></pre></td></tr></table></figure><p>从<code>context</code>中取出请求配置类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> HttpClientConnection managedConn;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> timeout = config.getConnectionRequestTimeout();</span><br><span class="line">    managedConn = connRequest.get(timeout &gt; <span class="number">0</span> ? timeout : <span class="number">0</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">&#125; <span class="keyword">catch</span>(<span class="keyword">final</span> InterruptedException interrupted) &#123;</span><br><span class="line">    Thread.currentThread().interrupt();</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> RequestAbortedException(<span class="string">"Request aborted"</span>, interrupted);</span><br><span class="line">&#125; <span class="keyword">catch</span>(<span class="keyword">final</span> ExecutionException ex) &#123;</span><br><span class="line">    Throwable cause = ex.getCause();</span><br><span class="line">    <span class="keyword">if</span> (cause == <span class="keyword">null</span>) &#123;</span><br><span class="line">        cause = ex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> RequestAbortedException(<span class="string">"Request execution failed"</span>, cause);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<code>connRequest</code>得到一个<code>HttpClientConnection</code>，<code>HttpClientConnection</code> 可用于通过指定路由路径进行通信。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">context.setAttribute(HttpCoreContext.HTTP_CONNECTION, managedConn);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (config.isStaleConnectionCheckEnabled()) &#123;</span><br><span class="line">        <span class="comment">// validate connection</span></span><br><span class="line">        <span class="keyword">if</span> (managedConn.isOpen()) &#123;</span><br><span class="line">            <span class="keyword">this</span>.log.debug(<span class="string">"Stale connection check"</span>);</span><br><span class="line">            <span class="keyword">if</span> (managedConn.isStale()) &#123;</span><br><span class="line">                <span class="keyword">this</span>.log.debug(<span class="string">"Stale connection detected"</span>);</span><br><span class="line">                managedConn.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol><li>把<code>managedConn</code>放入<code>context</code>上下文中</li><li>对失效链接进行校验</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> ConnectionHolder connHolder = <span class="keyword">new</span> ConnectionHolder(<span class="keyword">this</span>.log, <span class="keyword">this</span>.connManager, managedConn);</span><br></pre></td></tr></table></figure><p>创建一个链接持有者。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (execAware != <span class="keyword">null</span>) &#123;</span><br><span class="line">                execAware.setCancellable(connHolder);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>使<code>execAware</code>请求<code>request</code>拥有链接持有者，这样用户可以对<code>request</code>可以直接对持有者进行操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">HttpResponse response;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> execCount = <span class="number">1</span>;; execCount++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (execCount &gt; <span class="number">1</span> &amp;&amp; !RequestEntityProxy.isRepeatable(request)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NonRepeatableRequestException(<span class="string">"Cannot retry request "</span> +</span><br><span class="line">                        <span class="string">"with a non-repeatable request entity."</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (execAware != <span class="keyword">null</span> &amp;&amp; execAware.isAborted()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RequestAbortedException(<span class="string">"Request aborted"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!managedConn.isOpen()) &#123;</span><br><span class="line">                <span class="keyword">this</span>.log.debug(<span class="string">"Opening connection "</span> + route);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    establishRoute(proxyAuthState, managedConn, route, request, context);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> TunnelRefusedException ex) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">this</span>.log.isDebugEnabled()) &#123;</span><br><span class="line">                        <span class="keyword">this</span>.log.debug(ex.getMessage());</span><br><span class="line">                    &#125;</span><br><span class="line">                    response = ex.getResponse();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> timeout = config.getSocketTimeout();</span><br><span class="line">            <span class="keyword">if</span> (timeout &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                managedConn.setSocketTimeout(timeout);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (execAware != <span class="keyword">null</span> &amp;&amp; execAware.isAborted()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RequestAbortedException(<span class="string">"Request aborted"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.log.isDebugEnabled()) &#123;</span><br><span class="line">                <span class="keyword">this</span>.log.debug(<span class="string">"Executing request "</span> + request.getRequestLine());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 。。。 省略auth相关</span></span><br><span class="line"></span><br><span class="line">            response = requestExecutor.execute(request, managedConn, context);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// The connection is in or can be brought to a re-usable state.</span></span><br><span class="line">            <span class="keyword">if</span> (reuseStrategy.keepAlive(response, context)) &#123;</span><br><span class="line">                <span class="comment">// Set the idle duration of this connection</span></span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">long</span> duration = keepAliveStrategy.getKeepAliveDuration(response, context);</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.log.isDebugEnabled()) &#123;</span><br><span class="line">                    <span class="keyword">final</span> String s;</span><br><span class="line">                    <span class="keyword">if</span> (duration &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        s = <span class="string">"for "</span> + duration + <span class="string">" "</span> + TimeUnit.MILLISECONDS;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        s = <span class="string">"indefinitely"</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">this</span>.log.debug(<span class="string">"Connection can be kept alive "</span> + s);</span><br><span class="line">                &#125;</span><br><span class="line">                connHolder.setValidFor(duration, TimeUnit.MILLISECONDS);</span><br><span class="line">                connHolder.markReusable();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                connHolder.markNonReusable();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 。。。 省略auth相关、</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>这个代码块放在一个循环里边，循环的正常流程的终止条件在<code>needAuthentication()</code>判断中，暂不做分析。我们来对以上代码进行一个简要的分析：</p><ol><li>判断在第二次循环以后是否可以重复读，如果不可以重复读，则抛出异常。(不可重复读的指的是流，像<code>StringEntity</code> <code>FileEntity</code>这样的都是可以重复读的)</li><li>好几处地方都对<code>execAware</code>真正的<code>request</code>的是否终止<code>isAborted()</code>方法做校验，如果终止了，则抛出异常。有了这个我们就可以随时取消请求了。</li><li>如果链接不是open状态的，那么使用<code>route</code>路由对象重新建立一次链接。</li><li>对链接进行超时设置。</li><li>使用请求执行器<code>requestExecutor</code>执行请求得到<code>response</code>对象。</li><li>根据消息头判断链接是否要保持长链接，如果是，标记<code>connHolder</code>为可重用的，如果否，则标记为不可重用的。</li></ol><blockquote><p>注：在执行请求的时候，用到的<code>request</code>是<code>HttpRequestWrapper</code>包装类，使用包装类是防止真正的请求操作时发生改变。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (userToken == <span class="keyword">null</span>) &#123;</span><br><span class="line">            userToken = userTokenHandler.getUserToken(context);</span><br><span class="line">            context.setAttribute(HttpClientContext.USER_TOKEN, userToken);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (userToken != <span class="keyword">null</span>) &#123;</span><br><span class="line">            connHolder.setState(userToken);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>把当前用户标识保存给链接持有者。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// check for entity, release connection if possible</span></span><br><span class="line"><span class="keyword">final</span> HttpEntity entity = response.getEntity();</span><br><span class="line"><span class="keyword">if</span> (entity == <span class="keyword">null</span> || !entity.isStreaming()) &#123;</span><br><span class="line">    <span class="comment">// connection not needed and (assumed to be) in re-usable state</span></span><br><span class="line">    connHolder.releaseConnection();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> HttpResponseProxy(response, <span class="keyword">null</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> HttpResponseProxy(response, connHolder);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>从返回的<code>respnse</code>中得到<code>HttpEntity</code>，校验实体如果是空或者不是一个流，则释放链接。</li><li>使用<code>HttpResponseProxy</code>代理类对response进行代理，如果读取完了响应，那么这个响应就会关闭。</li></ol><hr><p>至此，<code>HttpClient</code>对象的<code>execute()</code>方法的简要的执行流程基本上就分析完毕。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上一遍总结的&lt;code&gt;HttpClient&lt;/code&gt;对象的构造过程，本篇主要总结&lt;code&gt;HttpClient&lt;/code&gt;对象的&lt;code&gt;execute()&lt;/code&gt;方法的执行流程，我们先看整体的时序图（省略部分细节），然后一步步分析。当不知道流程的时候走debug也是不错的选择。&lt;/p&gt;
    
    </summary>
    
      <category term="网络" scheme="http://www.peierlong.com/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="Http" scheme="http://www.peierlong.com/tags/Http/"/>
    
      <category term="HttpClient" scheme="http://www.peierlong.com/tags/HttpClient/"/>
    
  </entry>
  
  <entry>
    <title>HttpClient4.5.3源码浅析(HttpClient对象构造过程)</title>
    <link href="http://www.peierlong.com/2018/06/28/HttpClient4.5.3%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90(HttpClient%E6%9E%84%E9%80%A0%E8%BF%87%E7%A8%8B)/"/>
    <id>http://www.peierlong.com/2018/06/28/HttpClient4.5.3源码浅析(HttpClient构造过程)/</id>
    <published>2018-06-28T08:22:27.000Z</published>
    <updated>2019-03-13T02:32:01.036Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由于现有的对<code>HttpClient</code>的工具类封装未形成统一的配置，针对线程池的配置也不全面，工具类的封装也没做到使用简洁合理回收，正好遇到<code>SpringMVC</code>向<code>SpringBoot</code>的迁移，于是对<code>HttpClient</code>进行一次重构，对<code>HttpClient</code>进行版本升级，并将相关配置分离出来管理。由于对<code>HttpClient</code>具体实现逻辑不是很清楚，所以有了这次的分析。</p><a id="more"></a><h1 id="分析目标"><a href="#分析目标" class="headerlink" title="分析目标"></a>分析目标</h1><ul><li>学习<code>HttpClient</code>的代码架构，了解实现方式和具体的调用方式。</li><li>学习<code>HttpClient</code>对线程池的支持以及<code>IdleConnectionEvictor</code>类对线程池中失效连接的清除。</li><li>学习<code>HttpClientBuilder</code>中对<code>HttpClient</code>的构建过程。</li></ul><h1 id="整体结构"><a href="#整体结构" class="headerlink" title="整体结构"></a>整体结构</h1><h2 id="HttpClient接口实现结构"><a href="#HttpClient接口实现结构" class="headerlink" title="HttpClient接口实现结构"></a>HttpClient接口实现结构</h2><p><img src="http://peierlong-blog.oss-cn-hongkong.aliyuncs.com/Xnip2018-06-179_16-24-12.jpg" alt="Xnip2018-06-179_16-24-12.jpg"></p><p><code>HttpClient</code>接口是<code>HttpClient</code>的核心接口，整个实现也是围绕着这个接口来做动作。</p><p><code>HttpClient</code>接口有三个实现类，其中<code>AutoRetryHttpClient</code>和<code>DecompressingHttpClient</code>在4.3版本标记为过期类，故不做分析，主要来看<code>CloseableHttpClient</code>类。</p><p><code>CloseableHttpClient</code>类是一个抽象类，它有三个子类，其中<code>AbstractHttpClient</code>为过期类，<code>MinimalHttpClient</code>是精简实现了，<code>InternalHttpClient</code>是主要实现。</p><h2 id="HttpClint的构造过程"><a href="#HttpClint的构造过程" class="headerlink" title="HttpClint的构造过程"></a>HttpClint的构造过程</h2><p>首先调用<code>HttpClients</code>类的<code>createDefault()</code>，根据注释和返回都能看出采用的<code>CloseableHttpClient</code>为默认实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates &#123;<span class="doctag">@link</span> CloseableHttpClient&#125; instance with default</span></span><br><span class="line"><span class="comment">     * configuration.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CloseableHttpClient <span class="title">createDefault</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> HttpClientBuilder.create().build();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>其次通过<code>HttpClientBuilder.create()</code>创建<code>HttpClientBuilder</code>实例，并调用<code>build()</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> CloseableHttpClient <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ... 照顾版面，省略中间各种配置代码</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> InternalHttpClient(</span><br><span class="line">                execChain,</span><br><span class="line">                connManagerCopy,</span><br><span class="line">                routePlannerCopy,</span><br><span class="line">                cookieSpecRegistryCopy,</span><br><span class="line">                authSchemeRegistryCopy,</span><br><span class="line">                defaultCookieStore,</span><br><span class="line">                defaultCredentialsProvider,</span><br><span class="line">                defaultRequestConfig != <span class="keyword">null</span> ? defaultRequestConfig : RequestConfig.DEFAULT,</span><br><span class="line">                closeablesCopy);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我们看到，返回的<code>CloseableHttpClient</code>实例使用<code>InternalHttpClient</code>类实现。</p><h2 id="HttpClient对线程池的支持方式"><a href="#HttpClient对线程池的支持方式" class="headerlink" title="HttpClient对线程池的支持方式"></a>HttpClient对线程池的支持方式</h2><p>HttpClientBuilder.java 类关于线程池部分源代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpClientBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Assigns &#123;<span class="doctag">@link</span> HttpClientConnectionManager&#125; instance.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> HttpClientBuilder <span class="title">setConnectionManager</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">final</span> HttpClientConnectionManager connManager)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.connManager = connManager;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> CloseableHttpClient <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        HttpClientConnectionManager connManagerCopy = <span class="keyword">this</span>.connManager;</span><br><span class="line">        <span class="keyword">if</span> (connManagerCopy == <span class="keyword">null</span>) &#123;</span><br><span class="line">            LayeredConnectionSocketFactory sslSocketFactoryCopy = <span class="keyword">this</span>.sslSocketFactory;</span><br><span class="line">            <span class="keyword">if</span> (sslSocketFactoryCopy == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">final</span> String[] supportedProtocols = systemProperties ? split(</span><br><span class="line">                        System.getProperty(<span class="string">"https.protocols"</span>)) : <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">final</span> String[] supportedCipherSuites = systemProperties ? split(</span><br><span class="line">                        System.getProperty(<span class="string">"https.cipherSuites"</span>)) : <span class="keyword">null</span>;</span><br><span class="line">                HostnameVerifier hostnameVerifierCopy = <span class="keyword">this</span>.hostnameVerifier;</span><br><span class="line">                <span class="keyword">if</span> (hostnameVerifierCopy == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    hostnameVerifierCopy = <span class="keyword">new</span> DefaultHostnameVerifier(publicSuffixMatcherCopy);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (sslContext != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    sslSocketFactoryCopy = <span class="keyword">new</span> SSLConnectionSocketFactory(</span><br><span class="line">                            sslContext, supportedProtocols, supportedCipherSuites, hostnameVerifierCopy);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (systemProperties) &#123;</span><br><span class="line">                        sslSocketFactoryCopy = <span class="keyword">new</span> SSLConnectionSocketFactory(</span><br><span class="line">                                (SSLSocketFactory) SSLSocketFactory.getDefault(),</span><br><span class="line">                                supportedProtocols, supportedCipherSuites, hostnameVerifierCopy);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        sslSocketFactoryCopy = <span class="keyword">new</span> SSLConnectionSocketFactory(</span><br><span class="line">                                SSLContexts.createDefault(),</span><br><span class="line">                                hostnameVerifierCopy);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@SuppressWarnings</span>(<span class="string">"resource"</span>)</span><br><span class="line">            <span class="keyword">final</span> PoolingHttpClientConnectionManager poolingmgr = <span class="keyword">new</span> PoolingHttpClientConnectionManager(</span><br><span class="line">                    RegistryBuilder.&lt;ConnectionSocketFactory&gt;create()</span><br><span class="line">                        .register(<span class="string">"http"</span>, PlainConnectionSocketFactory.getSocketFactory())</span><br><span class="line">                        .register(<span class="string">"https"</span>, sslSocketFactoryCopy)</span><br><span class="line">                        .build(),</span><br><span class="line">                    <span class="keyword">null</span>,</span><br><span class="line">                    <span class="keyword">null</span>,</span><br><span class="line">                    dnsResolver,</span><br><span class="line">                    connTimeToLive,</span><br><span class="line">                    connTimeToLiveTimeUnit != <span class="keyword">null</span> ? connTimeToLiveTimeUnit : TimeUnit.MILLISECONDS);</span><br><span class="line">            <span class="keyword">if</span> (defaultSocketConfig != <span class="keyword">null</span>) &#123;</span><br><span class="line">                poolingmgr.setDefaultSocketConfig(defaultSocketConfig);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (defaultConnectionConfig != <span class="keyword">null</span>) &#123;</span><br><span class="line">                poolingmgr.setDefaultConnectionConfig(defaultConnectionConfig);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (systemProperties) &#123;</span><br><span class="line">                String s = System.getProperty(<span class="string">"http.keepAlive"</span>, <span class="string">"true"</span>);</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">"true"</span>.equalsIgnoreCase(s)) &#123;</span><br><span class="line">                    s = System.getProperty(<span class="string">"http.maxConnections"</span>, <span class="string">"5"</span>);</span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">int</span> max = Integer.parseInt(s);</span><br><span class="line">                    poolingmgr.setDefaultMaxPerRoute(max);</span><br><span class="line">                    poolingmgr.setMaxTotal(<span class="number">2</span> * max);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (maxConnTotal &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                poolingmgr.setMaxTotal(maxConnTotal);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (maxConnPerRoute &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                poolingmgr.setDefaultMaxPerRoute(maxConnPerRoute);</span><br><span class="line">            &#125;</span><br><span class="line">            connManagerCopy = poolingmgr;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到<code>HttpClientBuilder</code>提供<code>setConnectionManager()</code>方法来传入一个<code>HttpClientConnectionManager</code>类型，而<code>HttpClientBuilder</code>可以通过<code>HttpClients.custom()</code>方法获得。</p><p>如果我们不传入自定义的<code>HttpClientConnectionManager</code>，在执行<code>build()</code>方法时会创建一个默认的线程池，代码参考<code>HttpClientBuilder</code>的<code>build()</code>方法。</p><h2 id="HttpClient对线程池失效链接的的处理"><a href="#HttpClient对线程池失效链接的的处理" class="headerlink" title="HttpClient对线程池失效链接的的处理"></a>HttpClient对线程池失效链接的的处理</h2><p>在4.4版本，提供了<code>IdleConnectionEvictor</code>类进行对失效线程和超时闲置线程的处理。主要实现代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.thread = <span class="keyword">this</span>.threadFactory.newThread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">while</span> (!Thread.currentThread().isInterrupted()) &#123;</span><br><span class="line">                        Thread.sleep(sleepTimeMs);</span><br><span class="line">                        connectionManager.closeExpiredConnections();</span><br><span class="line">                        <span class="keyword">if</span> (maxIdleTimeMs &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                            connectionManager.closeIdleConnections(maxIdleTimeMs, TimeUnit.MILLISECONDS);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> Exception ex) &#123;</span><br><span class="line">                    exception = ex;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>简单来讲，实现原理是起一个后台线程，心跳检测，调用<code>connectionManager.closeExpiredConnections()</code>方法来进行失效回收，在<code>HttpClientBuilder</code>中有两个参数来控制是否启用失效回收。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> evictExpiredConnections;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> evictIdleConnections;</span><br></pre></td></tr></table></figure><p>在<code>build()</code>方法中调用如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (evictExpiredConnections || evictIdleConnections) &#123;</span><br><span class="line">            <span class="keyword">final</span> IdleConnectionEvictor connectionEvictor = <span class="keyword">new</span> IdleConnectionEvictor(cm,</span><br><span class="line">                    maxIdleTime &gt; <span class="number">0</span> ? maxIdleTime : <span class="number">10</span>, maxIdleTimeUnit != <span class="keyword">null</span> ? maxIdleTimeUnit : TimeUnit.SECONDS);</span><br><span class="line">            closeablesCopy.add(<span class="keyword">new</span> Closeable() &#123;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                    connectionEvictor.shutdown();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;);</span><br><span class="line">            connectionEvictor.start();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h1 id="remark"><a href="#remark" class="headerlink" title="remark"></a>remark</h1><p>至此，对<code>HttpClient</code>的构造过程有所了解，下一篇主要学习一下HttpClient的execute()方法的执行过程。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;由于现有的对&lt;code&gt;HttpClient&lt;/code&gt;的工具类封装未形成统一的配置，针对线程池的配置也不全面，工具类的封装也没做到使用简洁合理回收，正好遇到&lt;code&gt;SpringMVC&lt;/code&gt;向&lt;code&gt;SpringBoot&lt;/code&gt;的迁移，于是对&lt;code&gt;HttpClient&lt;/code&gt;进行一次重构，对&lt;code&gt;HttpClient&lt;/code&gt;进行版本升级，并将相关配置分离出来管理。由于对&lt;code&gt;HttpClient&lt;/code&gt;具体实现逻辑不是很清楚，所以有了这次的分析。&lt;/p&gt;
    
    </summary>
    
      <category term="网络" scheme="http://www.peierlong.com/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="Http" scheme="http://www.peierlong.com/tags/Http/"/>
    
      <category term="HttpClient" scheme="http://www.peierlong.com/tags/HttpClient/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot读取配置文件方法</title>
    <link href="http://www.peierlong.com/2018/06/21/Spring-Boot%E8%AF%BB%E5%8F%96%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%96%B9%E6%B3%95/"/>
    <id>http://www.peierlong.com/2018/06/21/Spring-Boot读取配置文件方法/</id>
    <published>2018-06-21T06:32:50.000Z</published>
    <updated>2019-03-14T02:06:15.498Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-使用-Value方式读取，示例如下"><a href="#1-使用-Value方式读取，示例如下" class="headerlink" title="1. 使用@Value方式读取，示例如下"></a>1. 使用@Value方式读取，示例如下</h2><p>在 <code>application.properties</code> 中加入如下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test=123</span><br></pre></td></tr></table></figure><a id="more"></a><p>然后在类中可以使用@Value注解取值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Value(&quot;$&#123;test&#125;&quot;)</span><br><span class="line">private String test;</span><br></pre></td></tr></table></figure><h2 id="2-使用Environment方式取值"><a href="#2-使用Environment方式取值" class="headerlink" title="2. 使用Environment方式取值"></a>2. 使用Environment方式取值</h2><p>同样，以读取方式一中的配置文件内容为例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">private Environment env;</span><br><span class="line"></span><br><span class="line">@RequestMapping(&quot;/test&quot;)</span><br><span class="line">public String test()&#123;</span><br><span class="line">    return env.getProperty(&quot;test&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-自定义配置文件映射"><a href="#3-自定义配置文件映射" class="headerlink" title="3. 自定义配置文件映射"></a>3. 自定义配置文件映射</h2><p>在<code>application.properties</code>文件加入内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">test.name=zhangsan</span><br><span class="line">test.age=1</span><br></pre></td></tr></table></figure><p>新建实体 <code>Test.java</code>,内容如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"test"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>可以使用 <code>@PropertySource(&quot;classpath:my2.properties&quot;)</code> 指定读取的配置文件</p></blockquote><p>end！</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-使用-Value方式读取，示例如下&quot;&gt;&lt;a href=&quot;#1-使用-Value方式读取，示例如下&quot; class=&quot;headerlink&quot; title=&quot;1. 使用@Value方式读取，示例如下&quot;&gt;&lt;/a&gt;1. 使用@Value方式读取，示例如下&lt;/h2&gt;&lt;p&gt;在 &lt;code&gt;application.properties&lt;/code&gt; 中加入如下内容&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;test=123&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Java" scheme="http://www.peierlong.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://www.peierlong.com/tags/Java/"/>
    
      <category term="Spring" scheme="http://www.peierlong.com/tags/Spring/"/>
    
      <category term="Spring Boot" scheme="http://www.peierlong.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>微信支付生成10位一天内不能重复的数字工具类</title>
    <link href="http://www.peierlong.com/2018/05/15/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E7%94%9F%E6%88%9010%E4%BD%8D%E4%B8%80%E5%A4%A9%E5%86%85%E4%B8%8D%E8%83%BD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    <id>http://www.peierlong.com/2018/05/15/微信支付生成10位一天内不能重复的数字工具类/</id>
    <published>2018-05-15T08:00:15.000Z</published>
    <updated>2019-04-28T02:26:10.570Z</updated>
    
    <content type="html"><![CDATA[<p><br>在开发微信支付现金红包功能时遇到生成商户号的需要生成10位一天内不能重复的数字，如果用单纯的随机数，有可能随机数碰撞，产生相同商户号的问题，所以自己写了个工具类。</p><a id="more"></a><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String todayIndex = DateUtil.getSDFFDate();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 商户订单号（每个订单号必须唯一）</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 组成：mch_id+yyyymmdd+10位一天内不能重复的数字</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> String <span class="title">generateRedPackMchBillno</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!todayIndex.equals(DateUtil.getSDFFDate())) &#123;</span><br><span class="line">        list.clear();</span><br><span class="line">    &#125;</span><br><span class="line">    String mchBillno = MAC_ID + DateUtil.getSDFFDate() + getRandomNumber();</span><br><span class="line">    <span class="keyword">if</span> (list.contains(mchBillno)) &#123;</span><br><span class="line">        <span class="keyword">return</span> generateRedPackMchBillno();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        list.add(mchBillno);</span><br><span class="line">        todayIndex = DateUtil.getSDFFDate();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mchBillno;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中由于代码存在多个竟态条件，如果不采取同步，在多线程条件下会存在线程安全问题，所以方法要同步。</p><p>DateUtil部分代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">static</span> SimpleDateFormat sdff = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyyMMdd"</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getSDFFDate</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sdff.format(<span class="keyword">new</span> Date());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="缺陷思考"><a href="#缺陷思考" class="headerlink" title="缺陷思考"></a>缺陷思考</h2><p>缓存的已经生成过的商户号在 JVM 重启的时候会重置，会导致有几率重复生成，所以需要把已经生成过的商户进行持久化缓存，可以借助开启持久化的 Redis 来进行缓存。</p><p>The end！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;br&gt;在开发微信支付现金红包功能时遇到生成商户号的需要生成10位一天内不能重复的数字，如果用单纯的随机数，有可能随机数碰撞，产生相同商户号的问题，所以自己写了个工具类。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://www.peierlong.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://www.peierlong.com/tags/Java/"/>
    
      <category term="WXPay" scheme="http://www.peierlong.com/tags/WXPay/"/>
    
  </entry>
  
  <entry>
    <title>Java ClassLodaer 知识总结</title>
    <link href="http://www.peierlong.com/2018/03/28/Java-ClassLodaer-%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
    <id>http://www.peierlong.com/2018/03/28/Java-ClassLodaer-知识总结/</id>
    <published>2018-03-28T08:46:05.000Z</published>
    <updated>2019-03-13T02:32:01.037Z</updated>
    
    <content type="html"><![CDATA[<p>转载自<a href="http://ifeve.com/" target="_blank" rel="noopener">并发编程网 – ifeve.com</a>本文链接地址: <a href="http://ifeve.com/classloader/" target="_blank" rel="noopener">深入浅出ClassLoader</a></p><h1 id="类与类加载器"><a href="#类与类加载器" class="headerlink" title="类与类加载器"></a>类与类加载器</h1><h1 id="双亲委派模型"><a href="#双亲委派模型" class="headerlink" title="双亲委派模型"></a>双亲委派模型</h1><h1 id="违反双亲委派原则的例子"><a href="#违反双亲委派原则的例子" class="headerlink" title="违反双亲委派原则的例子"></a>违反双亲委派原则的例子</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;转载自&lt;a href=&quot;http://ifeve.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;并发编程网 – ifeve.com&lt;/a&gt;本文链接地址: &lt;a href=&quot;http://ifeve.com/classloader/&quot; target
      
    
    </summary>
    
      <category term="Java" scheme="http://www.peierlong.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://www.peierlong.com/tags/Java/"/>
    
      <category term="JVM" scheme="http://www.peierlong.com/tags/JVM/"/>
    
      <category term="ClassLoader" scheme="http://www.peierlong.com/tags/ClassLoader/"/>
    
  </entry>
  
  <entry>
    <title>Java字节码指令的分类</title>
    <link href="http://www.peierlong.com/2018/03/28/Java%E5%AD%97%E8%8A%82%E7%A0%81%E6%8C%87%E4%BB%A4%E7%9A%84%E5%88%86%E7%B1%BB/"/>
    <id>http://www.peierlong.com/2018/03/28/Java字节码指令的分类/</id>
    <published>2018-03-28T07:36:30.000Z</published>
    <updated>2019-03-13T02:32:01.037Z</updated>
    
    <content type="html"><![CDATA[<p><strong>具有阅读字节码指令的能力对于理解Java语义有着重要的意义</strong></p><a id="more"></a><p><img src="http://peierlong-blog.oss-cn-hongkong.aliyuncs.com/Xnip2018-03-87_15-35-04.jpg" alt="Xnip2018-03-87_15-35-04.jpg"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;具有阅读字节码指令的能力对于理解Java语义有着重要的意义&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://www.peierlong.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://www.peierlong.com/tags/Java/"/>
    
      <category term="JVM" scheme="http://www.peierlong.com/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>阿里云文件上传Python脚本(自动复制MarkDown语法的图片至粘贴板)</title>
    <link href="http://www.peierlong.com/2018/03/13/%E9%98%BF%E9%87%8C%E4%BA%91%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0Python%E8%84%9A%E6%9C%AC-%E8%87%AA%E5%8A%A8%E5%A4%8D%E5%88%B6MarkDown%E8%AF%AD%E6%B3%95%E7%9A%84%E5%9B%BE%E7%89%87%E8%87%B3%E7%B2%98%E8%B4%B4%E6%9D%BF/"/>
    <id>http://www.peierlong.com/2018/03/13/阿里云文件上传Python脚本-自动复制MarkDown语法的图片至粘贴板/</id>
    <published>2018-03-13T05:07:40.000Z</published>
    <updated>2019-03-13T02:32:01.044Z</updated>
    
    <content type="html"><![CDATA[<h1 id="oss2mk"><a href="#oss2mk" class="headerlink" title="oss2mk"></a>oss2mk</h1><p>由于<code>MWeb</code>不支持阿里云图床，本脚本的主要功能时把图片上传到阿里云oss并把图片的markdown语法复制到粘贴板。</p><blockquote><p>GitHub地址: <a href="https://github.com/peierlong/oss2mk" target="_blank" rel="noopener">https://github.com/peierlong/oss2mk</a></p></blockquote><a id="more"></a><h2 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">系统          : macOS 10.13</span><br><span class="line">Python版本    : 3.6.1</span><br></pre></td></tr></table></figure><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>执行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oss_2_mk.py [-absolute_path]</span><br></pre></td></tr></table></figure><p>例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">执行:</span><br><span class="line">oss_2_mk.py /Users/elong/Desktop/war/gc_collector.jpg</span><br><span class="line">输出:</span><br><span class="line">obj_name : gc_collector.jpg</span><br><span class="line">start upload to oss ....</span><br><span class="line">end upload to oss</span><br><span class="line">please CMD + v to paste markdown img grammar</span><br></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> oss2</span><br><span class="line"></span><br><span class="line">PREFIX = <span class="string">'http://peierlong-blog.oss-cn-hongkong.aliyuncs.com/'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">uploadToOSS</span><span class="params">(name, path)</span>:</span></span><br><span class="line">    accessKeyId = <span class="string">"YOUR ALIYUN ACCESSKEYID"</span></span><br><span class="line">    accessKeySecret = <span class="string">"YOUR ALIYUN ACCESSKEYSECRET"</span></span><br><span class="line">    <span class="comment"># endpoint = "oss-cn-qingdao-internal.aliyuncs.com"</span></span><br><span class="line">    endpoint = <span class="string">"oss-cn-hongkong.aliyuncs.com"</span></span><br><span class="line">    bucket = <span class="string">"peierlong-blog"</span></span><br><span class="line">    auth = oss2.Auth(accessKeyId, accessKeySecret)</span><br><span class="line">    service = oss2.Service(auth, endpoint)</span><br><span class="line">    bucketObj = oss2.Bucket(auth, endpoint, bucket)</span><br><span class="line">    bucketObj.put_object_from_file(name, path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getClipboardData</span><span class="params">()</span>:</span></span><br><span class="line">    p = subprocess.Popen([<span class="string">'pbpaste'</span>], stdout=subprocess.PIPE)</span><br><span class="line">    retcode = p.wait()</span><br><span class="line">    data = p.stdout.read()</span><br><span class="line">    <span class="comment"># 这里的data为bytes类型，之后需要转成utf-8操作</span></span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setClipboardData</span><span class="params">(data)</span>:</span></span><br><span class="line">    p = subprocess.Popen([<span class="string">'pbcopy'</span>], stdin=subprocess.PIPE)</span><br><span class="line">    p.stdin.write(data)</span><br><span class="line">    p.stdin.close()</span><br><span class="line">    p.communicate()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) != <span class="number">2</span>:</span><br><span class="line">        print(<span class="string">"args error, ploease input the file path. "</span>)</span><br><span class="line"></span><br><span class="line">    path = sys.argv[<span class="number">1</span>]</span><br><span class="line">    obj_name = path[path.rfind(<span class="string">"/"</span>) + <span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'obj_name : '</span> + obj_name)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'start upload to oss ....'</span>)</span><br><span class="line">    uploadToOSS(obj_name, path)</span><br><span class="line">    print(<span class="string">'end upload to oss'</span>)</span><br><span class="line"></span><br><span class="line">    mk_img = <span class="string">'![%s](%s)'</span> % (obj_name, PREFIX + obj_name)</span><br><span class="line">    setClipboardData(bytes(mk_img, <span class="string">'utf8'</span>))</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'please CMD + v to paste markdown img grammar'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>The end!</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;oss2mk&quot;&gt;&lt;a href=&quot;#oss2mk&quot; class=&quot;headerlink&quot; title=&quot;oss2mk&quot;&gt;&lt;/a&gt;oss2mk&lt;/h1&gt;&lt;p&gt;由于&lt;code&gt;MWeb&lt;/code&gt;不支持阿里云图床，本脚本的主要功能时把图片上传到阿里云oss并把图片的markdown语法复制到粘贴板。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;GitHub地址: &lt;a href=&quot;https://github.com/peierlong/oss2mk&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/peierlong/oss2mk&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.peierlong.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://www.peierlong.com/tags/Python/"/>
    
      <category term="aliyun" scheme="http://www.peierlong.com/tags/aliyun/"/>
    
  </entry>
  
  <entry>
    <title>JVM垃圾收集器知识总结</title>
    <link href="http://www.peierlong.com/2018/03/09/JVM%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
    <id>http://www.peierlong.com/2018/03/09/JVM垃圾收集器知识总结/</id>
    <published>2018-03-09T10:16:25.000Z</published>
    <updated>2019-03-13T02:32:01.036Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文大部分的知识来自于周志明大神的<a href="https://book.douban.com/subject/24722612/" target="_blank" rel="noopener">《深入理解Java虚拟机（第2版）》</a>一书，系统学习JVM相关知识的强烈推荐。 </p></blockquote><h1 id="一、垃圾收集算法"><a href="#一、垃圾收集算法" class="headerlink" title="一、垃圾收集算法"></a>一、垃圾收集算法</h1><p>有关垃圾收集算法，有一个国外的大神用JS生成的动图直观的展示了垃圾回收的过程，有助于对垃圾收集算法的理解，这是文章<a href="https://spin.atomicobject.com/2014/09/03/visualizing-garbage-collection-algorithms/" target="_blank" rel="noopener">连接</a>。</p><h2 id="无垃圾回收-NO-GC"><a href="#无垃圾回收-NO-GC" class="headerlink" title="无垃圾回收(NO-GC)"></a>无垃圾回收(NO-GC)</h2><p>在程序运行结束后，一次性的对内存进行回收，是最简单的回收机制。其并发性能最高，如果能把任务的颗粒度变得更细，可以有效的清理垃圾。最大的缺点是对长时间运行的程序或者占用内存大的程序来说，非常容易内存溢出。</p><a id="more"></a><h2 id="引用计数算法-Reference-Counting"><a href="#引用计数算法-Reference-Counting" class="headerlink" title="引用计数算法(Reference Counting)"></a>引用计数算法(Reference Counting)</h2><p>每个对象都持有一个引用的计数器，每当有一个地方引用它时，计数器就加一，当引用失效时，计数器就减一，当计数器为零时，说明对象是可被回收的。引用计数器最大的缺陷时循环引用问题。而且在并发情况下，引用计数器存在线程安全问题。</p><h2 id="标记清除算法-Mark-Sweep"><a href="#标记清除算法-Mark-Sweep" class="headerlink" title="标记清除算法(Mark Sweep)"></a>标记清除算法(Mark Sweep)</h2><p>顾名思义，标记清除算法分为两个阶段，『标记』和『清除』。相对于引用计数算法，解决了循环引用的问题，并且开销要小，因为不需要维护计数器了。</p><p>标记清除算法会产生内存碎片，从而导致大对象无法获取到连续的内存空间。并且，两个阶段的执行效率都不高。</p><h2 id="标记整理算法-Mark-Compact"><a href="#标记整理算法-Mark-Compact" class="headerlink" title="标记整理算法(Mark Compact)"></a>标记整理算法(Mark Compact)</h2><p>标记整理算法是在标记清除算法的基础上进行改进的算法，标记过程和标记清除算法一下，标记后，会把所有对象向一端移动，然后清除其余内存。</p><h2 id="复制算法-Copying"><a href="#复制算法-Copying" class="headerlink" title="复制算法(Copying)"></a>复制算法(Copying)</h2><p>复制算法在针对对象存活率较低的场景下有较高的效率，复制算法会降低空间成本。在Java虚拟机堆内存新生代非常适合使用这种算法。</p><h1 id="Java垃圾收集器"><a href="#Java垃圾收集器" class="headerlink" title="Java垃圾收集器"></a>Java垃圾收集器</h1><p>Java垃圾收集器使用分代收集算法，由于垃圾收集主要集中在堆内存中，于是把堆分为”年轻代”和”年老代”，也把方法区在逻辑上称为”永久代”。年轻代中的对象存活时间较短，绝大部分垃圾收集器使用复制算法。年老代中对象存活时间较长，一般采用标记-清除或者标记-整理算法。下图为各个收集器是否</p><p><img src="http://peierlong-blog.oss-cn-hongkong.aliyuncs.com/gc_collector.jpg" alt="gc_collector.jpg"></p><h2 id="年轻代中的垃圾收集器"><a href="#年轻代中的垃圾收集器" class="headerlink" title="年轻代中的垃圾收集器"></a>年轻代中的垃圾收集器</h2><h3 id="Serial收集器"><a href="#Serial收集器" class="headerlink" title="Serial收集器"></a>Serial收集器</h3><ul><li>采用复制算法实现</li><li>单线程</li><li>GC线程执行时，必须 Stop The World</li></ul><h3 id="ParNew收集器"><a href="#ParNew收集器" class="headerlink" title="ParNew收集器"></a>ParNew收集器</h3><ul><li>采用复制算法实现</li><li>多线程</li><li>多条GC线程并行执行，用户线程必须 Stop The World</li></ul><h3 id="Parallel-Scavenge收集器"><a href="#Parallel-Scavenge收集器" class="headerlink" title="Parallel Scavenge收集器"></a>Parallel Scavenge收集器</h3><ul><li>采用复制算法实现</li><li>并行多线程收集器</li><li>多条GC线程并行执行，用户线程必须 Stop The World</li><li>其他收集器关注用户线程停顿时间，此收集器关注程序吞吐量。</li></ul><h2 id="年老代"><a href="#年老代" class="headerlink" title="年老代"></a>年老代</h2><h3 id="Serial-Old收集器"><a href="#Serial-Old收集器" class="headerlink" title="Serial Old收集器"></a>Serial Old收集器</h3><ul><li>Serial Old收集器时Serial收集器的年老代版本</li><li>单线程收集器</li><li>标记-整理算法</li><li>是CMS算法的后备方案</li></ul><h3 id="Parallel-Old收集器"><a href="#Parallel-Old收集器" class="headerlink" title="Parallel Old收集器"></a>Parallel Old收集器</h3><ul><li>Parallel Old是Parallel Scavenge收集器的老年代版本</li><li>多线程收集器</li><li>注重吞吐量以及CPU资源敏感场合，可以优先考虑Parallel Scavenge + Parallel Old的组合。</li></ul><h3 id="CMS收集器"><a href="#CMS收集器" class="headerlink" title="CMS收集器"></a>CMS收集器</h3><ul><li>CMS(Concurrent Mark Sweep)收集器是一种以获取最短停顿时间目标的收集器。</li><li>使用标记清除算法实现</li><li>多线程</li></ul><p><strong>优点</strong>：</p><ul><li>并发收集</li><li>低停顿</li></ul><p><strong>缺点</strong>：</p><ul><li>CMS收集器对CPU资源非常敏感（回收线程数 (cpu数量 + 3)/4   所以CPU不足4个时，垃圾收集线程占用50% CPU资源 ）</li><li>CMS收集器无法处理浮动垃圾(Floating Garbage)</li><li>标记-清除算法带来的内存碎片处理</li></ul><p><strong>CMS过程：</strong></p><p><img src="http://peierlong-blog.oss-cn-hongkong.aliyuncs.com/CMS-Process.jpg" alt="CMS-Process.jpg"></p><h1 id="remark"><a href="#remark" class="headerlink" title="remark"></a>remark</h1><p>由于G1收集器暂时使用并不主流，暂时不做过多的学习。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文大部分的知识来自于周志明大神的&lt;a href=&quot;https://book.douban.com/subject/24722612/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《深入理解Java虚拟机（第2版）》&lt;/a&gt;一书，系统学习JVM相关知识的强烈推荐。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;一、垃圾收集算法&quot;&gt;&lt;a href=&quot;#一、垃圾收集算法&quot; class=&quot;headerlink&quot; title=&quot;一、垃圾收集算法&quot;&gt;&lt;/a&gt;一、垃圾收集算法&lt;/h1&gt;&lt;p&gt;有关垃圾收集算法，有一个国外的大神用JS生成的动图直观的展示了垃圾回收的过程，有助于对垃圾收集算法的理解，这是文章&lt;a href=&quot;https://spin.atomicobject.com/2014/09/03/visualizing-garbage-collection-algorithms/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;连接&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;无垃圾回收-NO-GC&quot;&gt;&lt;a href=&quot;#无垃圾回收-NO-GC&quot; class=&quot;headerlink&quot; title=&quot;无垃圾回收(NO-GC)&quot;&gt;&lt;/a&gt;无垃圾回收(NO-GC)&lt;/h2&gt;&lt;p&gt;在程序运行结束后，一次性的对内存进行回收，是最简单的回收机制。其并发性能最高，如果能把任务的颗粒度变得更细，可以有效的清理垃圾。最大的缺点是对长时间运行的程序或者占用内存大的程序来说，非常容易内存溢出。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://www.peierlong.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://www.peierlong.com/tags/Java/"/>
    
      <category term="JVM" scheme="http://www.peierlong.com/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>JVM内存模型简述</title>
    <link href="http://www.peierlong.com/2018/03/09/JVM%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E6%80%BB%E7%BB%93/"/>
    <id>http://www.peierlong.com/2018/03/09/JVM内存模型总结/</id>
    <published>2018-03-09T10:11:14.000Z</published>
    <updated>2019-03-13T02:32:01.036Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文大部分的知识来自于周志明大神的<a href="https://book.douban.com/subject/24722612/" target="_blank" rel="noopener">《深入理解Java虚拟机（第2版）》</a>一书，系统学习JVM相关知识的强烈推荐。 </p></blockquote><p>Java内存区域概括性的来讲，分为线程独占的虚拟机栈(VM Stack)、本地方法栈(Native Method Stack)、程序计数器(Programer Counter Register)和线程共享的方法区(Method Area)、堆(Heap)。</p><p><img src="http://peierlong-blog.oss-cn-hongkong.aliyuncs.com/Xnip2018-03-71_15-54-12.jpg" alt="Xnip2018-03-71_15-54-12"></p><a id="more"></a><h1 id="一、线程独占区域"><a href="#一、线程独占区域" class="headerlink" title="一、线程独占区域"></a>一、线程独占区域</h1><h2 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h2><p>程序计数器是一块较小的内存区域，每一个线程都会分配一个程序计数器，用来存储当前所致行的字节码的行号，程序的执行、跳转、循环、异常处理都需要这个计数器来完成。它的生命周期和线程相同。</p><h2 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a>虚拟机栈</h2><p>和程序计数器一样，虚拟机栈也是线程独占的，生命周期和线程相同，虚拟机栈描述的是Java方法执行的内存模型：每个方法执行的同时都会创建一个栈帧（Stack Frame）用于存储局部变量表、操作数栈、动态链接、方法出口等信息。</p><p>每一个方法从调用到执行完成的过程，对应着一次入栈和出栈的过程。</p><h3 id="局部变量表"><a href="#局部变量表" class="headerlink" title="局部变量表"></a>局部变量表</h3><p>局部变量表中存储着编译器可知的基本数据类型、对象引用和returnAddress类型(指向一条字节码指令的地址)。</p><p>局部变量表的大小表示为局部变量空间(Slot)，64位长度的double和long占用两个Slot，其余占用一个。</p><h2 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h2><p>本地方法栈和虚拟机栈的作用类似，本地方法栈为虚拟机使用到的Native方法服务，虚拟机规范没有明确规范此区域，Sun HotSpot直接把本地方法栈和虚拟机栈合二为一。</p><h1 id="二、线程共享区域"><a href="#二、线程共享区域" class="headerlink" title="二、线程共享区域"></a>二、线程共享区域</h1><h2 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h2><p>方法区是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息，常量，静态变量，即时编译器编译后的代码等数据。</p><p>HotSpot虚拟机中，方法区也称为”永久代(Permanent Generation)”。</p><h2 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h2><p>运行时常量池是方法区的一部分，用于存放编译期间生成的各种字面量和符号引用，类加载后进入方法区的运行时常量池中存放。</p><h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><p>堆是Java虚拟机内存模型中最大的一块线程共享的区域，此内存区域的唯一作用就是存放对象实例。</p><p>Java堆是垃圾收集器管理的主要区域，也称为”GC堆”。使用分代收集算法，分为新生代和老年代。从内存分配的角度看，Java堆可能划分出多个线程私有的分配缓冲区(Thread Local Allocation Buffer, TLAB)。</p><hr><p>以上，Java内存模型简述完毕，上一张总结的思维导图。</p><p><img src="http://peierlong-blog.oss-cn-hongkong.aliyuncs.com/WechatIMG178.jpeg" alt="WechatIMG178.jpeg"></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文大部分的知识来自于周志明大神的&lt;a href=&quot;https://book.douban.com/subject/24722612/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《深入理解Java虚拟机（第2版）》&lt;/a&gt;一书，系统学习JVM相关知识的强烈推荐。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Java内存区域概括性的来讲，分为线程独占的虚拟机栈(VM Stack)、本地方法栈(Native Method Stack)、程序计数器(Programer Counter Register)和线程共享的方法区(Method Area)、堆(Heap)。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://peierlong-blog.oss-cn-hongkong.aliyuncs.com/Xnip2018-03-71_15-54-12.jpg&quot; alt=&quot;Xnip2018-03-71_15-54-12&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://www.peierlong.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://www.peierlong.com/tags/Java/"/>
    
      <category term="JVM" scheme="http://www.peierlong.com/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>《Elasticsearch权威指南》读书笔记</title>
    <link href="http://www.peierlong.com/2018/03/06/%E3%80%8AElasticsearch-%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://www.peierlong.com/2018/03/06/《Elasticsearch-权威指南》读书笔记/</id>
    <published>2018-03-06T06:31:27.000Z</published>
    <updated>2019-03-13T02:32:01.041Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文为《Elasticsearch权威指南》阅读笔记，原书链接请点击<a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/index.html" target="_blank" rel="noopener">这里</a>查看。</p></blockquote><a id="more"></a><h1 id="索引-动词-操作与索引-名词"><a href="#索引-动词-操作与索引-名词" class="headerlink" title="索引(动词)操作与索引(名词)"></a>索引(动词)操作与索引(名词)</h1><p>整个<code>PUT</code>操作的动作称之为索引(动词)</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">PUT /megacorp/employee/1</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"first_name"</span> : <span class="string">"John"</span>,</span><br><span class="line">    <span class="attr">"last_name"</span> :  <span class="string">"Smith"</span>,</span><br><span class="line">    <span class="attr">"age"</span> :        <span class="number">25</span>,</span><br><span class="line">    <span class="attr">"about"</span> :      <span class="string">"I love to go rock climbing"</span>,</span><br><span class="line">    <span class="attr">"interests"</span>: [ <span class="string">"sports"</span>, <span class="string">"music"</span> ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>megacorp</code> 索引名称</li><li><code>employee</code> 索引类型</li><li><code>1</code>        特定雇员的id</li></ul><h1 id="检索文档"><a href="#检索文档" class="headerlink" title="检索文档"></a>检索文档</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /megacorp/employee/1</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_index"</span> :   <span class="string">"megacorp"</span>,</span><br><span class="line">  <span class="attr">"_type"</span> :    <span class="string">"employee"</span>,</span><br><span class="line">  <span class="attr">"_id"</span> :      <span class="string">"1"</span>,</span><br><span class="line">  <span class="attr">"_version"</span> : <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"found"</span> :    <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"_source"</span> :  &#123;</span><br><span class="line">      <span class="attr">"first_name"</span> :  <span class="string">"John"</span>,</span><br><span class="line">      <span class="attr">"last_name"</span> :   <span class="string">"Smith"</span>,</span><br><span class="line">      <span class="attr">"age"</span> :         <span class="number">25</span>,</span><br><span class="line">      <span class="attr">"about"</span> :       <span class="string">"I love to go rock climbing"</span>,</span><br><span class="line">      <span class="attr">"interests"</span>:  [ <span class="string">"sports"</span>, <span class="string">"music"</span> ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="轻量搜索"><a href="#轻量搜索" class="headerlink" title="轻量搜索"></a>轻量搜索</h1><h2 id="搜索所有雇员"><a href="#搜索所有雇员" class="headerlink" title="搜索所有雇员"></a>搜索所有雇员</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /megacorp/employee/_search</span><br></pre></td></tr></table></figure><h2 id="搜索last-name为Smith的所有雇员"><a href="#搜索last-name为Smith的所有雇员" class="headerlink" title="搜索last_name为Smith的所有雇员"></a>搜索last_name为Smith的所有雇员</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /megacorp/employee/_search?q=last_name:Smith</span><br></pre></td></tr></table></figure><h1 id="使用查询表达式搜索"><a href="#使用查询表达式搜索" class="headerlink" title="使用查询表达式搜索"></a>使用查询表达式搜索</h1><p><strong>搜索last_name为Smith的所有雇员</strong>可以改写为以下形式</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /megacorp/employee/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span> : &#123;</span><br><span class="line">        <span class="attr">"match"</span> : &#123;</span><br><span class="line">            <span class="attr">"last_name"</span> : <span class="string">"Smith"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="更复杂的搜索"><a href="#更复杂的搜索" class="headerlink" title="更复杂的搜索"></a>更复杂的搜索</h1><h2 id="过滤器-filter-的使用"><a href="#过滤器-filter-的使用" class="headerlink" title="过滤器 filter 的使用"></a>过滤器 filter 的使用</h2><p>搜索last_name为Smith的所有雇员，并只需要年龄大于30的。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">GET /megacorp/employee/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span> : &#123;</span><br><span class="line">        <span class="attr">"bool"</span>: &#123;</span><br><span class="line">            <span class="attr">"must"</span>: &#123;</span><br><span class="line">                <span class="attr">"match"</span> : &#123;</span><br><span class="line">                    <span class="attr">"last_name"</span> : <span class="string">"smith"</span> </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"filter"</span>: &#123;</span><br><span class="line">                <span class="attr">"range"</span> : &#123;</span><br><span class="line">                    <span class="attr">"age"</span> : &#123; <span class="attr">"gt"</span> : <span class="number">30</span> &#125; </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="全文搜索"><a href="#全文搜索" class="headerlink" title="全文搜索"></a>全文搜索</h1><p>搜索下所有喜欢攀岩（rock climbing）的雇员</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /megacorp/employee/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span> : &#123;</span><br><span class="line">        <span class="attr">"match"</span> : &#123;</span><br><span class="line">            <span class="attr">"about"</span> : <span class="string">"rock climbing"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   ...</span><br><span class="line">   "hits": &#123;</span><br><span class="line">      "total":      2,</span><br><span class="line">      "max_score":  0.16273327,</span><br><span class="line">      "hits": [</span><br><span class="line">         &#123;</span><br><span class="line">            ...</span><br><span class="line">            "_score":         0.16273327, </span><br><span class="line">            "_source": &#123;</span><br><span class="line">               ...</span><br><span class="line">               "about":       "I love to go rock climbing",</span><br><span class="line">               ...</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;,</span><br><span class="line">         &#123;</span><br><span class="line">            ...</span><br><span class="line">            "_score":         0.016878016, </span><br><span class="line">            "_source": &#123;</span><br><span class="line">               ...</span><br><span class="line">               "about":       "I love to go rock albums",</span><br><span class="line">               ...</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      ]</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>_score</code> 为相关性得分字段，得分越高，排名越靠前。</p><h1 id="短语搜索"><a href="#短语搜索" class="headerlink" title="短语搜索"></a>短语搜索</h1><p>仅匹配同时包含 “rock” 和 “climbing” ，并且 二者以短语 “rock climbing” 的形式紧挨着的雇员记录。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /megacorp/employee/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span> : &#123;</span><br><span class="line">        <span class="attr">"match_phrase"</span> : &#123;</span><br><span class="line">            <span class="attr">"about"</span> : <span class="string">"rock climbing"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="高亮搜索"><a href="#高亮搜索" class="headerlink" title="高亮搜索"></a>高亮搜索</h1><p>ES中使用<code>highlight</code>参数使结果高亮。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET /megacorp/employee/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span> : &#123;</span><br><span class="line">        <span class="attr">"match_phrase"</span> : &#123;</span><br><span class="line">            <span class="attr">"about"</span> : <span class="string">"rock climbing"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"highlight"</span>: &#123;</span><br><span class="line">        <span class="attr">"fields"</span> : &#123;</span><br><span class="line">            <span class="attr">"about"</span> : &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="分析-聚合搜索-aggregations"><a href="#分析-聚合搜索-aggregations" class="headerlink" title="分析-聚合搜索(aggregations)"></a>分析-聚合搜索(aggregations)</h1><p>挖掘出雇员中最受欢迎的兴趣爱好</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /megacorp/employee/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"aggs"</span>: &#123;</span><br><span class="line">    <span class="attr">"all_interests"</span>: &#123;</span><br><span class="line">      <span class="attr">"terms"</span>: &#123; <span class="attr">"field"</span>: <span class="string">"interests"</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文为《Elasticsearch权威指南》阅读笔记，原书链接请点击&lt;a href=&quot;https://www.elastic.co/guide/cn/elasticsearch/guide/current/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这里&lt;/a&gt;查看。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Elasticsearch" scheme="http://www.peierlong.com/categories/Elasticsearch/"/>
    
    
      <category term="Elasticsearch" scheme="http://www.peierlong.com/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>二叉查找树实现</title>
    <link href="http://www.peierlong.com/2018/02/09/%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%E5%AE%9E%E7%8E%B0/"/>
    <id>http://www.peierlong.com/2018/02/09/二叉查找树实现/</id>
    <published>2018-02-09T06:21:43.000Z</published>
    <updated>2019-03-13T02:32:01.041Z</updated>
    
    <content type="html"><![CDATA[<p>今天是农历腊月二十四，也是过年前上班的最后一天，乘着工作不忙的功夫，把算法4公开课的第四周做个结束，本文总结第四周中第二节符号表(Symbol Tables)中的二叉查找树(Binary Search Tree)数据结构。</p><h2 id="二叉查找树的性质"><a href="#二叉查找树的性质" class="headerlink" title="二叉查找树的性质"></a>二叉查找树的性质</h2><p>from : <a href="https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%85%83%E6%90%9C%E5%B0%8B%E6%A8%B9" target="_blank" rel="noopener">wiki</a></p><blockquote><p>二叉查找树（英语：Binary Search Tree），也称二叉搜索树、有序二叉树（英语：ordered binary tree），排序二叉树（英语：sorted binary tree），是指一棵空树或者具有下列性质的二叉树：</p></blockquote><blockquote><p>若任意节点的左子树不空，则左子树上所有节点的值均小于它的根节点的值；<br>若任意节点的右子树不空，则右子树上所有节点的值均大于它的根节点的值；<br>任意节点的左、右子树也分别为二叉查找树；<br>没有键值相等的节点。</p></blockquote><a id="more"></a><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.Queue;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二叉查找树的实现</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> elong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/1/23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BST</span>&lt;<span class="title">Key</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">Key</span>&gt;, <span class="title">Value</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Node root;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Key key;</span><br><span class="line">        <span class="keyword">private</span> Value value;</span><br><span class="line">        <span class="keyword">private</span> Node left, right;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Key key, Value value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">            <span class="keyword">this</span>.count = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> key + <span class="string">" : "</span> + value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(Key key, Value value)</span> </span>&#123;</span><br><span class="line">        root = put(root, key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">put</span><span class="params">(Node x, Key key, Value value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Node(key, value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> cmp = key.compareTo(x.key);</span><br><span class="line">        <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            x.left = put(x.left, key, value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            x.right = put(x.right, key, value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cmp == <span class="number">0</span>) &#123;</span><br><span class="line">            x.value = value;</span><br><span class="line">        &#125;</span><br><span class="line">        x.count = <span class="number">1</span> + size(x.left) + size(x.right);</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Value <span class="title">get</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">        Node x = root;</span><br><span class="line">        <span class="keyword">while</span> (x != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> cmp = key.compareTo(x.key);</span><br><span class="line">            <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                x = x.left;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                x = x.right;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> x.value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node.count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Key <span class="title">minKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Node node = minKey(root);</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> node.key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">minKey</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node.left == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> minKey(node.left);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Key <span class="title">maxKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Node node = maxKey(root);</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> node.key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">maxKey</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node.right == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxKey(node.right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 小于等于给定Key的最大值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Key <span class="title">floor</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">        Node node = floor(root, key);</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> node.key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">floor</span><span class="params">(Node node, Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> cmp = key.compareTo(node.key);</span><br><span class="line">        <span class="keyword">if</span> (cmp == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> floor(node.left, key);</span><br><span class="line">        &#125;</span><br><span class="line">        Node x = floor(node.right, key);</span><br><span class="line">        <span class="keyword">if</span> (x != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 大于等于给定Key的最小值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Key <span class="title">ceiling</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">        Node node = ceiling(root, key);</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node.key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">ceiling</span><span class="params">(Node node, Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> cmp = key.compareTo(node.key);</span><br><span class="line">        <span class="keyword">if</span> (cmp == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> ceiling(node.right, key);</span><br><span class="line">        &#125;</span><br><span class="line">        Node x = ceiling(node.left, key);</span><br><span class="line">        <span class="keyword">if</span> (x != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 小于Key的Node的数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rank</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rank(root, key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">rank</span><span class="params">(Node node, Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> cmp = key.compareTo(node.key);</span><br><span class="line">        <span class="keyword">if</span> (cmp == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> size(node.left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span> + size(node.left) + rank(node.right, key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rank(node.left, key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterable&lt;Key&gt; <span class="title">keys</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Queue&lt;Key&gt; q = <span class="keyword">new</span> Queue&lt;&gt;();</span><br><span class="line">        inorder(root, q);</span><br><span class="line">        <span class="keyword">return</span> q;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">inorder</span><span class="params">(Node node, Queue&lt;Key&gt; q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        inorder(node.left, q);</span><br><span class="line">        q.enqueue(node.key);</span><br><span class="line">        inorder(node.right, q);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Key key)</span> </span>&#123;</span><br><span class="line">        delete(root, key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">delete</span><span class="params">(Node node, Key key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> cmp = key.compareTo(node.key);</span><br><span class="line">        <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            node.left = delete(node.left, key);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            node.right = delete(node.right, key);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (node.right == <span class="keyword">null</span>) <span class="keyword">return</span> node.left;</span><br><span class="line">            <span class="keyword">if</span> (node.left == <span class="keyword">null</span>) <span class="keyword">return</span> node.right;</span><br><span class="line"></span><br><span class="line">            Node t = node;</span><br><span class="line">            node = minKey(t.right);</span><br><span class="line">            node.right = delMin(t.right);</span><br><span class="line">            node.left = t.left;</span><br><span class="line">        &#125;</span><br><span class="line">        node.count = <span class="number">1</span> + size(node.left) + size(node.right);</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delMin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        delMin(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">delMin</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node.left == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> node.right;</span><br><span class="line">        &#125;</span><br><span class="line">        node.left = delMin(node.left);</span><br><span class="line">        node.count = <span class="number">1</span> + size(node.left) + size(node.right);</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BST&lt;String, String&gt; bst = <span class="keyword">new</span> BST&lt;&gt;();</span><br><span class="line">        bst.put(<span class="string">"b"</span>, <span class="string">"b"</span>);</span><br><span class="line">        bst.put(<span class="string">"c"</span>, <span class="string">"c"</span>);</span><br><span class="line">        bst.put(<span class="string">"d"</span>, <span class="string">"d"</span>);</span><br><span class="line">        bst.put(<span class="string">"e"</span>, <span class="string">"e"</span>);</span><br><span class="line">        bst.put(<span class="string">"u"</span>, <span class="string">"r"</span>);</span><br><span class="line">        bst.put(<span class="string">"f"</span>, <span class="string">"r"</span>);</span><br><span class="line">        bst.put(<span class="string">"y"</span>, <span class="string">"r"</span>);</span><br><span class="line">        bst.put(<span class="string">"v"</span>, <span class="string">"r"</span>);</span><br><span class="line">        bst.put(<span class="string">"v"</span>, <span class="string">"r"</span>);</span><br><span class="line">        bst.put(<span class="string">"v"</span>, <span class="string">"r"</span>);</span><br><span class="line">        bst.put(<span class="string">"a"</span>, <span class="string">"r"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(bst.ceiling(<span class="string">"a"</span>));</span><br><span class="line">        System.out.println(bst.maxKey());</span><br><span class="line">        System.out.println(bst.size());</span><br><span class="line">        System.out.println(bst.rank(<span class="string">"z"</span>));</span><br><span class="line"></span><br><span class="line">        bst.delMin();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String s : bst.keys()) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="本人思考"><a href="#本人思考" class="headerlink" title="本人思考"></a>本人思考</h2><ol><li>递归思想的运用有待提高</li><li>在写代码前，大脑中一定要有清晰的数据结构，否者容易写到一半思路断了。</li></ol><p>The end</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天是农历腊月二十四，也是过年前上班的最后一天，乘着工作不忙的功夫，把算法4公开课的第四周做个结束，本文总结第四周中第二节符号表(Symbol Tables)中的二叉查找树(Binary Search Tree)数据结构。&lt;/p&gt;
&lt;h2 id=&quot;二叉查找树的性质&quot;&gt;&lt;a href=&quot;#二叉查找树的性质&quot; class=&quot;headerlink&quot; title=&quot;二叉查找树的性质&quot;&gt;&lt;/a&gt;二叉查找树的性质&lt;/h2&gt;&lt;p&gt;from : &lt;a href=&quot;https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%85%83%E6%90%9C%E5%B0%8B%E6%A8%B9&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;wiki&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;二叉查找树（英语：Binary Search Tree），也称二叉搜索树、有序二叉树（英语：ordered binary tree），排序二叉树（英语：sorted binary tree），是指一棵空树或者具有下列性质的二叉树：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;若任意节点的左子树不空，则左子树上所有节点的值均小于它的根节点的值；&lt;br&gt;若任意节点的右子树不空，则右子树上所有节点的值均大于它的根节点的值；&lt;br&gt;任意节点的左、右子树也分别为二叉查找树；&lt;br&gt;没有键值相等的节点。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Algorithms" scheme="http://www.peierlong.com/categories/Algorithms/"/>
    
    
      <category term="Algorithms" scheme="http://www.peierlong.com/tags/Algorithms/"/>
    
  </entry>
  
  <entry>
    <title>tomcat下slf4j日志不输出问题探究与解决</title>
    <link href="http://www.peierlong.com/2018/02/05/tomcat%E4%B8%8Bslf4j%E6%97%A5%E5%BF%97%E4%B8%8D%E8%BE%93%E5%87%BA%E9%97%AE%E9%A2%98%E6%8E%A2%E7%A9%B6%E4%B8%8E%E8%A7%A3%E5%86%B3/"/>
    <id>http://www.peierlong.com/2018/02/05/tomcat下slf4j日志不输出问题探究与解决/</id>
    <published>2018-02-05T03:10:36.000Z</published>
    <updated>2019-12-19T03:30:41.665Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>近日，由于公司系统架构调整，发现tomcat8下日志输出有问题，但是tomcat7没有问题，其中但凡引用 <code>slf4j</code> 输出的日志都不输出了。</p><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>首先，定位问题，由于代码没有做过任何改动，所以直接定位到tomcat7和tomcat8差异引起的，感觉像是包冲突，所以沿着这个思路排查问题。</p><a id="more"></a><h3 id="通过日志来分析：在我的电脑上分别下载-tomcat7-和-tomcat8，在日志中看到打印到如下异常日志"><a href="#通过日志来分析：在我的电脑上分别下载-tomcat7-和-tomcat8，在日志中看到打印到如下异常日志" class="headerlink" title="通过日志来分析：在我的电脑上分别下载 tomcat7 和 tomcat8，在日志中看到打印到如下异常日志"></a>通过日志来分析：在我的电脑上分别下载 <code>tomcat7</code> 和 <code>tomcat8</code>，在日志中看到打印到如下异常日志</h3><blockquote><p><strong>不想看分析过程的直接看结果吧</strong><a href="https://www.peierlong.com/2018/02/05/tomcat%E4%B8%8Bslf4j%E6%97%A5%E5%BF%97%E4%B8%8D%E8%BE%93%E5%87%BA%E9%97%AE%E9%A2%98%E6%8E%A2%E7%A9%B6%E4%B8%8E%E8%A7%A3%E5%86%B3/#%E6%80%BB%E7%BB%93">点此跳转到结果</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SLF4J: Class path contains multiple SLF4J bindings.</span><br><span class="line">SLF4J: Found binding in [jar:file:/Users/elong/Desktop/war/apache-tomcat-8.5.24/webapps/niuban-mobile/WEB-INF/lib/slf4j-nop-1.7.0.jar!/org/slf4j/impl/StaticLoggerBinder.class]</span><br><span class="line">SLF4J: Found binding in [jar:file:/Users/elong/Desktop/war/apache-tomcat-8.5.24/webapps/niuban-mobile/WEB-INF/lib/slf4j-log4j12-1.7.9.jar!/org/slf4j/impl/StaticLoggerBinder.class]</span><br><span class="line">SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation.</span><br><span class="line">SLF4J: Actual binding is of type [org.slf4j.helpers.NOPLoggerFactory]</span><br></pre></td></tr></table></figure><p>此报错为依赖冲突引起的日志输出，通过一下方式查看依赖冲突：</p><ol><li>使用 idea 的 Maven Helper 插件</li><li>使用 <code>mvn dependency:tree</code> 查看依赖树</li></ol><p>使用 <code>exclusion</code> 来排除 <code>org.slf4j.helpers.NOPLoggerFactory</code> 的依赖即可。</p><h3 id="另一种方式：通过源码分析的思路，Debug模式下查看slf4j的Logger接口的具体实现类是什么"><a href="#另一种方式：通过源码分析的思路，Debug模式下查看slf4j的Logger接口的具体实现类是什么" class="headerlink" title="另一种方式：通过源码分析的思路，Debug模式下查看slf4j的Logger接口的具体实现类是什么?"></a>另一种方式：通过源码分析的思路，Debug模式下查看slf4j的<code>Logger</code>接口的具体实现类是什么?</h3><p>先上代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(Test.class);</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">testLogger</span><span class="params">()</span></span>&#123;</span><br><span class="line">    LOGGER.info(<span class="string">"this is a test"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Tomcat7下，用可以打印出日志的配置执行代码，<code>Logger</code>的具体实现类是<code>org.slf4j.impl.Log4jLoggerAdapter</code>，其中打印的启动日志也说明了这一点。</p><p><img src="http://peierlong-blog.oss-cn-hongkong.aliyuncs.com/006tKfTcly1fo6t6i7be4j31kw04dtdo.jpg" alt="006tKfTcly1fo6t6i7be4j31kw04dtdo.jpg"></p><p>同样的配置，在Tomcat8下，<code>Logger</code>的具体实现类是<code>org.slf4j.helpers.NOPLogger(NOP)</code><br>，NOPLogger为slf4j默认的无操作Logger实现类，所以很显然不会有日志输出的。</p><p><img src="http://peierlong-blog.oss-cn-hongkong.aliyuncs.com/006tKfTcly1fo6ta061i8j31kw04g79d.jpg" alt="006tKfTcly1fo6ta061i8j31kw04g79d.jpg"></p><p>那么问题来了，是什么导致的<code>Logger</code>实现类的改变？看源码找找线索</p><p>首先<code>LoggerFactory</code>的<code>getLogger()</code>方法实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Logger <span class="title">getLogger</span><span class="params">(Class clazz)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> getLogger(clazz.getName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return a logger named according to the name parameter using the statically</span></span><br><span class="line"><span class="comment"> * bound &#123;<span class="doctag">@link</span> ILoggerFactory&#125; instance.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> name The name of the logger.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> logger</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Logger <span class="title">getLogger</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">  ILoggerFactory iLoggerFactory = getILoggerFactory();</span><br><span class="line">  <span class="keyword">return</span> iLoggerFactory.getLogger(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体选择那种日志实现(e.g. java.util.logging, logback, log4j) 就在以上代码中 <code>ILoggerFactory</code> 接口的具体实现，所以我们接着看<code>getILoggerFactory()</code>方法的具体实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ILoggerFactory <span class="title">getILoggerFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (INITIALIZATION_STATE == UNINITIALIZED) &#123;</span><br><span class="line">      INITIALIZATION_STATE = ONGOING_INITIALIZATION;</span><br><span class="line">      performInitialization();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">switch</span> (INITIALIZATION_STATE) &#123;</span><br><span class="line">      <span class="keyword">case</span> SUCCESSFUL_INITIALIZATION:</span><br><span class="line">        <span class="keyword">return</span> StaticLoggerBinder.getSingleton().getLoggerFactory();</span><br><span class="line">      <span class="keyword">case</span> NOP_FALLBACK_INITIALIZATION:</span><br><span class="line">        <span class="keyword">return</span> NOP_FALLBACK_FACTORY;</span><br><span class="line">      <span class="keyword">case</span> FAILED_INITIALIZATION:</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(UNSUCCESSFUL_INIT_MSG);</span><br><span class="line">      <span class="keyword">case</span> ONGOING_INITIALIZATION:</span><br><span class="line">        <span class="comment">// support re-entrant behavior.</span></span><br><span class="line">        <span class="comment">// See also http://bugzilla.slf4j.org/show_bug.cgi?id=106</span></span><br><span class="line">        <span class="keyword">return</span> TEMP_FACTORY;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Unreachable code"</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>根据debug执行，tomcat7和tomcat8中都会执行到switch语句 <code>SUCCESSFUL_INITIALIZATION</code> 分支中，其中<code>StaticLoggerBinder</code>类的实例，其中<code>StaticLoggerBinder</code>中的<code>loggerFactory</code>接口属性指向了不同的实现（这也正是slf4j所谓的外观(Facade)模式，并不是具体的日志解决方案），所以我们接下来看<code>LoggerFactory</code>初始化时类加载器对<code>org/slf4j/impl/StaticLoggerBinder.class</code>类的加载的验证过程。我们看<code>performInitialization()</code>方法的实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">performInitialization</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    bind();</span><br><span class="line">    <span class="keyword">if</span> (INITIALIZATION_STATE == SUCCESSFUL_INITIALIZATION) &#123;</span><br><span class="line">      versionSanityCheck();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bind</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      Set staticLoggerBinderPathSet = findPossibleStaticLoggerBinderPathSet();</span><br><span class="line">      reportMultipleBindingAmbiguity(staticLoggerBinderPathSet);</span><br><span class="line">      <span class="comment">// the next line does the binding</span></span><br><span class="line">      StaticLoggerBinder.getSingleton();</span><br><span class="line">      INITIALIZATION_STATE = SUCCESSFUL_INITIALIZATION;</span><br><span class="line">      reportActualBinding(staticLoggerBinderPathSet);</span><br><span class="line">      emitSubstituteLoggerWarning();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoClassDefFoundError ncde) &#123;</span><br><span class="line">      String msg = ncde.getMessage();</span><br><span class="line">      <span class="keyword">if</span> (messageContainsOrgSlf4jImplStaticLoggerBinder(msg)) &#123;</span><br><span class="line">        INITIALIZATION_STATE = NOP_FALLBACK_INITIALIZATION;</span><br><span class="line">        Util.report(<span class="string">"Failed to load class \"org.slf4j.impl.StaticLoggerBinder\"."</span>);</span><br><span class="line">        Util.report(<span class="string">"Defaulting to no-operation (NOP) logger implementation"</span>);</span><br><span class="line">        Util.report(<span class="string">"See "</span> + NO_STATICLOGGERBINDER_URL</span><br><span class="line">                + <span class="string">" for further details."</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        failedBinding(ncde);</span><br><span class="line">        <span class="keyword">throw</span> ncde;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (java.lang.NoSuchMethodError nsme) &#123;</span><br><span class="line">      String msg = nsme.getMessage();</span><br><span class="line">      <span class="keyword">if</span> (msg != <span class="keyword">null</span> &amp;&amp; msg.indexOf(<span class="string">"org.slf4j.impl.StaticLoggerBinder.getSingleton()"</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">        INITIALIZATION_STATE = FAILED_INITIALIZATION;</span><br><span class="line">        Util.report(<span class="string">"slf4j-api 1.6.x (or later) is incompatible with this binding."</span>);</span><br><span class="line">        Util.report(<span class="string">"Your binding is version 1.5.5 or earlier."</span>);</span><br><span class="line">        Util.report(<span class="string">"Upgrade your binding to version 1.6.x."</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">throw</span> nsme;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      failedBinding(e);</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Unexpected initialization failure"</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Set <span class="title">findPossibleStaticLoggerBinderPathSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// use Set instead of list in order to deal with  bug #138</span></span><br><span class="line">    <span class="comment">// LinkedHashSet appropriate here because it preserves insertion order during iteration</span></span><br><span class="line">    Set staticLoggerBinderPathSet = <span class="keyword">new</span> LinkedHashSet();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      ClassLoader loggerFactoryClassLoader = LoggerFactory.class</span><br><span class="line">              .getClassLoader();</span><br><span class="line">      Enumeration paths;</span><br><span class="line">      <span class="keyword">if</span> (loggerFactoryClassLoader == <span class="keyword">null</span>) &#123;</span><br><span class="line">        paths = ClassLoader.getSystemResources(STATIC_LOGGER_BINDER_PATH);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        paths = loggerFactoryClassLoader</span><br><span class="line">                .getResources(STATIC_LOGGER_BINDER_PATH);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">while</span> (paths.hasMoreElements()) &#123;</span><br><span class="line">        URL path = (URL) paths.nextElement();</span><br><span class="line">        staticLoggerBinderPathSet.add(path);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException ioe) &#123;</span><br><span class="line">      Util.report(<span class="string">"Error getting resources from path"</span>, ioe);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> staticLoggerBinderPathSet;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>其中，<code>findPossibleStaticLoggerBinderPathSet()</code>方法中查找所有加载过的path，然后将其放到一个Set中，在后续的<code>reportMultipleBindingAmbiguity()</code>方法中进行验证打印错误日志，tomcat日志中我们看到的日志就是这个方法输出的。至此，源码分析完毕。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>真正没有输出日志的原因是因为<code>Logger</code>引用指向的实现不是<code>log4j</code>的实现所导致的，其中<code>LoggerFactory</code>类在类加载过程中，<code>ClassLoader</code>对多个<code>StaticLoggerBinder.class</code>文件的加载顺序不同，导致实现的不同。</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>有两种思路都解决了，第二种更优雅。</p><ol><li>尝试升级<code>slf4j</code>版本和<code>slf4j-log4j</code>桥接包版本，从1.7.9升级至1.7.25，问题解决。</li><li>不升级版本，解决依赖冲突，找到<code>slf4j-nop</code>包的maven依赖来源，从mvaen中使用<code>&lt;exclusions&gt;</code>标签排除依赖。</li></ol><p><strong>maven检查依赖冲突方式:</strong><br>使用<code>mvn dependency:tree</code>查看依赖树。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[INFO] +- com.aliyun:aliyun-java-sdk-core:jar:2.1.9:compile</span><br><span class="line">[INFO] +- com.aliyun.oss:aliyun-sdk-oss:jar:2.0.5:compile</span><br><span class="line">[INFO] |  +- org.apache.httpcomponents:httpclient:jar:4.4:compile</span><br><span class="line">[INFO] |  |  \- org.apache.httpcomponents:httpcore:jar:4.4:compile</span><br><span class="line">[INFO] |  \- net.sf.json-lib:json-lib:jar:jdk15:2.4:compile</span><br><span class="line">[INFO] |     \- net.sf.ezmorph:ezmorph:jar:1.0.6:compile</span><br><span class="line">[INFO] +- com.aliyun.opensearch:aliyun-sdk-opensearch:jar:2.1.3:compile</span><br><span class="line">[INFO] |  +- org.apache.httpcomponents:httpmime:jar:4.3.1:compile</span><br><span class="line">[INFO] |  +- org.json:json:jar:20131018:compile</span><br><span class="line">[INFO] |  \- org.slf4j:slf4j-nop:jar:1.7.0:compile</span><br></pre></td></tr></table></figure><p><strong><em>其中最后一行为找到冲突包的位置，也就是日志不输出的罪魁祸首，在<code>aliyun-sdk-opensearch:jar</code>包中依赖，所以在配置文件中把它干掉。</em></strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun.opensearch<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-sdk-opensearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-nop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>至此，问题完美解决，</p><h3 id="遗留问题"><a href="#遗留问题" class="headerlink" title="遗留问题"></a>遗留问题</h3><ol><li>tomcat7和tomcat8的<code>ParallelWebappClassLoader</code>类加载器的实现方式有何不同？为何加载顺序不同？（2018-2-26: 转一篇讲类加载器的 <a href="http://ifeve.com/classloader/" target="_blank" rel="noopener">文章</a>，讲的很不错）</li><li>在加载同名类的时候，真正运行的是哪个类是如何选择的？为何执行第一个被加载的类？</li></ol><h3 id="slf4j源码的两点个人感受"><a href="#slf4j源码的两点个人感受" class="headerlink" title="slf4j源码的两点个人感受"></a>slf4j源码的两点个人感受</h3><ol><li>羡慕其代码的命名规范、合理的代码抽象、模式的运用。</li><li>程序员就要有工匠精神，代码也是一种艺术品。:)</li></ol><p>end</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;近日，由于公司系统架构调整，发现tomcat8下日志输出有问题，但是tomcat7没有问题，其中但凡引用 &lt;code&gt;slf4j&lt;/code&gt; 输出的日志都不输出了。&lt;/p&gt;
&lt;h2 id=&quot;问题分析&quot;&gt;&lt;a href=&quot;#问题分析&quot; class=&quot;headerlink&quot; title=&quot;问题分析&quot;&gt;&lt;/a&gt;问题分析&lt;/h2&gt;&lt;p&gt;首先，定位问题，由于代码没有做过任何改动，所以直接定位到tomcat7和tomcat8差异引起的，感觉像是包冲突，所以沿着这个思路排查问题。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://www.peierlong.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://www.peierlong.com/tags/Java/"/>
    
      <category term="Log" scheme="http://www.peierlong.com/tags/Log/"/>
    
      <category term="Tomcat" scheme="http://www.peierlong.com/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>8Puzzle问题实现与踩坑</title>
    <link href="http://www.peierlong.com/2018/01/22/8Puzzle%E9%97%AE%E9%A2%98%E8%A7%A3%E7%AD%94/"/>
    <id>http://www.peierlong.com/2018/01/22/8Puzzle问题解答/</id>
    <published>2018-01-22T10:03:15.000Z</published>
    <updated>2019-03-13T02:32:01.032Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>8Puzzle问题算法使用<code>A*算法</code>，数据结构主要是<code>优先队列</code>。</p></blockquote><a id="more"></a><h2 id="评分系统错误修复记录"><a href="#评分系统错误修复记录" class="headerlink" title="评分系统错误修复记录"></a>评分系统错误修复记录</h2><h3 id="Board类toString实现丢失部分打印"><a href="#Board类toString实现丢失部分打印" class="headerlink" title="Board类toString实现丢失部分打印"></a>Board类toString实现丢失部分打印</h3><p>日志：</p><p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fnpjrlwdv1j30jk0cw75h.jpg" alt></p><p>解决方案，添加即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public String toString() &#123;</span><br><span class="line">    StringBuilder sb = new StringBuilder();</span><br><span class="line">    sb.append(blocks.length).append(&quot;\n&quot;);</span><br><span class="line">    for (int[] block : blocks) &#123;</span><br><span class="line">        for (int j = 0; j &lt; blocks.length; j++) &#123;</span><br><span class="line">            sb.append(&quot; &quot;).append(block[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(&quot;\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return sb.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Board类equals-实现BUG"><a href="#Board类equals-实现BUG" class="headerlink" title="Board类equals()实现BUG"></a>Board类equals()实现BUG</h3><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fnpkq11bipj30zw0kcn0e.jpg" alt></p><p>添加对对象的类的判断，添加后即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public boolean equals(Object other) &#123;</span><br><span class="line">    if (other == null) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    if (other == this) &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    if (other.getClass() != this.getClass()) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    if (other instanceof Board) &#123;</span><br><span class="line">        Board that = (Board) other;</span><br><span class="line">        if (that.blocks.length != this.blocks.length) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        for (int i = 0; i &lt; this.blocks.length; i++) &#123;</span><br><span class="line">            for (int j = 0; j &lt; this.blocks.length; j++) &#123;</span><br><span class="line">                if (this.blocks[i][j] != that.blocks[i][j]) &#123;</span><br><span class="line">                    return false;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Board类twin-实现BUG"><a href="#Board类twin-实现BUG" class="headerlink" title="Board类twin()实现BUG"></a>Board类twin()实现BUG</h3><p>日志：</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fnplkepjngj30hw0tw42i.jpg" alt></p><p>解决方案，swap 调用方错误，修改为 board 引用即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public Board twin() &#123;</span><br><span class="line">    Board board = new Board(blocks);</span><br><span class="line">    for (int i = 0; i &lt; blocks.length; i++) &#123;</span><br><span class="line">        for (int j = 0; j &lt; blocks.length - 1; j++) &#123;</span><br><span class="line">            if (board.blocks[i][j] != 0 &amp;&amp; board.blocks[i][j + 1] != 0) &#123;</span><br><span class="line">                board.swap(i, j, i, j + 1);</span><br><span class="line">                return board;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return board;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终，终于评分满分。</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fnplxwihmnj31f20d4q4s.jpg" alt></p><h2 id="完整实现代码"><a href="#完整实现代码" class="headerlink" title="完整实现代码"></a>完整实现代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><span class="line">import edu.princeton.cs.algs4.Stack;</span><br><span class="line">import edu.princeton.cs.algs4.StdOut;</span><br><span class="line"></span><br><span class="line">public class Board &#123;</span><br><span class="line">    private final int[][] blocks;</span><br><span class="line"></span><br><span class="line">    // construct a board from an n-by-n array of blocks</span><br><span class="line">    // (where blocks[i][j] = block in row i, column j)</span><br><span class="line">    public Board(int[][] blocks) &#123;</span><br><span class="line">        this.blocks = new int[blocks.length][blocks.length];</span><br><span class="line">        for (int i = 0; i &lt; blocks.length; i++) &#123;</span><br><span class="line">            for (int j = 0; j &lt; blocks.length; j++) &#123;</span><br><span class="line">                this.blocks[i][j] = blocks[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // board dimension n</span><br><span class="line">    public int dimension() &#123;</span><br><span class="line">        return blocks.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // number of blocks out of place</span><br><span class="line">    public int hamming() &#123;</span><br><span class="line">        int hammingNumber = 0;</span><br><span class="line">        for (int i = 0; i &lt; blocks.length; i++) &#123;</span><br><span class="line">            for (int j = 0; j &lt; blocks.length; j++) &#123;</span><br><span class="line">                if (blocks[i][j] != getGoalVal(i, j) &amp;&amp; !isEnd(i, j)) &#123;</span><br><span class="line">                    hammingNumber++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return hammingNumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // sum of Manhattan distances between blocks and goal</span><br><span class="line">    public int manhattan() &#123;</span><br><span class="line">        int manhattanNumber = 0;</span><br><span class="line">        for (int i = 0; i &lt; blocks.length; i++) &#123;</span><br><span class="line">            for (int j = 0; j &lt; blocks.length; j++) &#123;</span><br><span class="line">                int value = blocks[i][j];</span><br><span class="line">                if (value != 0 &amp;&amp; value != getGoalVal(i, j)) &#123;</span><br><span class="line">                    int ii = (value - 1) / blocks.length;</span><br><span class="line">                    int jj = value - ii * blocks.length - 1;</span><br><span class="line">                    int distance = Math.abs(i - ii) + Math.abs(j - jj);</span><br><span class="line">                    manhattanNumber += distance;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return manhattanNumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // is this board the goal board?</span><br><span class="line">    public boolean isGoal() &#123;</span><br><span class="line">        if (blocks[blocks.length - 1][blocks.length - 1] != 0) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        for (int i = 0; i &lt; blocks.length; i++) &#123;</span><br><span class="line">            for (int j = 0; j &lt; blocks.length; j++) &#123;</span><br><span class="line">                if (blocks[i][j] != getGoalVal(i, j)) &#123;</span><br><span class="line">                    return false;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // a board that is obtained by exchanging any pair of blocks</span><br><span class="line">    public Board twin() &#123;</span><br><span class="line">        Board board = new Board(blocks);</span><br><span class="line">        for (int i = 0; i &lt; blocks.length; i++) &#123;</span><br><span class="line">            for (int j = 0; j &lt; blocks.length - 1; j++) &#123;</span><br><span class="line">                if (board.blocks[i][j] != 0 &amp;&amp; board.blocks[i][j + 1] != 0) &#123;</span><br><span class="line">                    board.swap(i, j, i, j + 1);</span><br><span class="line">                    return board;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return board;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // does this board equal y?</span><br><span class="line">    public boolean equals(Object other) &#123;</span><br><span class="line">        if (other == null) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        if (other == this) &#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        if (other.getClass() != this.getClass()) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        if (other instanceof Board) &#123;</span><br><span class="line">            Board that = (Board) other;</span><br><span class="line">            if (that.blocks.length != this.blocks.length) &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">            for (int i = 0; i &lt; this.blocks.length; i++) &#123;</span><br><span class="line">                for (int j = 0; j &lt; this.blocks.length; j++) &#123;</span><br><span class="line">                    if (this.blocks[i][j] != that.blocks[i][j]) &#123;</span><br><span class="line">                        return false;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private int getGoalVal(int i, int j) &#123;</span><br><span class="line">        if (isEnd(i, j)) &#123;</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;</span><br><span class="line">        return i * blocks.length + j + 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private boolean isEnd(int i, int j) &#123;</span><br><span class="line">        return i == blocks.length - 1 &amp;&amp; j == blocks.length - 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private boolean swap(int i, int j, int si, int sj) &#123;</span><br><span class="line">        if (si &lt; 0 || si &gt;= blocks.length || sj &lt; 0 || sj &gt;= blocks.length) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        int swap = blocks[i][j];</span><br><span class="line">        blocks[i][j] = blocks[si][sj];</span><br><span class="line">        blocks[si][sj] = swap;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // all neighboring boards</span><br><span class="line">    public Iterable&lt;Board&gt; neighbors() &#123;</span><br><span class="line">        int i0 = 0, j0 = 0;</span><br><span class="line">        boolean isFind = false;</span><br><span class="line">        for (int i = 0; i &lt; blocks.length; i++) &#123;</span><br><span class="line">            for (int j = 0; j &lt; blocks.length; j++) &#123;</span><br><span class="line">                if (blocks[i][j] == 0) &#123;</span><br><span class="line">                    i0 = i;</span><br><span class="line">                    j0 = j;</span><br><span class="line">                    isFind = true;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (isFind) &#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Stack&lt;Board&gt; stack = new Stack&lt;&gt;();</span><br><span class="line">        Board board = new Board(blocks);</span><br><span class="line">        boolean isSwap = board.swap(i0, j0, i0 - 1, j0);</span><br><span class="line">        if (isSwap) &#123;</span><br><span class="line">            stack.push(board);</span><br><span class="line">        &#125;</span><br><span class="line">        board = new Board(blocks);</span><br><span class="line">        isSwap = board.swap(i0, j0, i0 + 1, j0);</span><br><span class="line">        if (isSwap) &#123;</span><br><span class="line">            stack.push(board);</span><br><span class="line">        &#125;</span><br><span class="line">        board = new Board(blocks);</span><br><span class="line">        isSwap = board.swap(i0, j0, i0, j0 - 1);</span><br><span class="line">        if (isSwap) &#123;</span><br><span class="line">            stack.push(board);</span><br><span class="line">        &#125;</span><br><span class="line">        board = new Board(blocks);</span><br><span class="line">        isSwap = board.swap(i0, j0, i0, j0 + 1);</span><br><span class="line">        if (isSwap) &#123;</span><br><span class="line">            stack.push(board);</span><br><span class="line">        &#125;</span><br><span class="line">        return stack;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // string representation of this board (in the output format specified below)</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        StringBuilder sb = new StringBuilder();</span><br><span class="line">        sb.append(blocks.length).append(&quot;\n&quot;);</span><br><span class="line">        for (int[] block : blocks) &#123;</span><br><span class="line">            for (int j = 0; j &lt; blocks.length; j++) &#123;</span><br><span class="line">                sb.append(&quot; &quot;).append(block[j]);</span><br><span class="line">            &#125;</span><br><span class="line">            sb.append(&quot;\n&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        return sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // unit tests (not graded)</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int[][] is = new int[3][3];</span><br><span class="line">        int start = 0;</span><br><span class="line">        for (int i = 0; i &lt; is.length; i++) &#123;</span><br><span class="line">            for (int j = 0; j &lt; is.length; j++) &#123;</span><br><span class="line">                is[i][j] = start++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Board board = new Board(is);</span><br><span class="line">        StdOut.println(board);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line">import edu.princeton.cs.algs4.In;</span><br><span class="line">import edu.princeton.cs.algs4.MinPQ;</span><br><span class="line">import edu.princeton.cs.algs4.Stack;</span><br><span class="line">import edu.princeton.cs.algs4.StdOut;</span><br><span class="line"></span><br><span class="line">public class Solver &#123;</span><br><span class="line"></span><br><span class="line">    private final Stack&lt;Board&gt; boards;</span><br><span class="line">    private boolean isSolvable;</span><br><span class="line"></span><br><span class="line">    // find a solution to the initial board (using the A* algorithm)</span><br><span class="line">    public Solver(Board initial) &#123;</span><br><span class="line">        if (initial == null) &#123;</span><br><span class="line">            throw new IllegalArgumentException(&quot;args board is null&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        boards = new Stack&lt;&gt;();</span><br><span class="line">        if (initial.isGoal()) &#123;</span><br><span class="line">            isSolvable = true;</span><br><span class="line">            boards.push(initial);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        if (initial.twin().isGoal()) &#123;</span><br><span class="line">            isSolvable = false;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        MinPQ&lt;SearchNode&gt; minPQ = new MinPQ&lt;&gt;();</span><br><span class="line">        MinPQ&lt;SearchNode&gt; minPQTwin = new MinPQ&lt;&gt;();</span><br><span class="line">        Board board = initial;</span><br><span class="line">        Board boardTwin = initial.twin();</span><br><span class="line">        SearchNode node = new SearchNode(board, 0, null);</span><br><span class="line">        SearchNode nodeTwin = new SearchNode(boardTwin, 0, null);</span><br><span class="line">        minPQ.insert(node);</span><br><span class="line">        minPQTwin.insert(nodeTwin);</span><br><span class="line"></span><br><span class="line">        while (true) &#123;</span><br><span class="line">            node = minPQ.delMin();</span><br><span class="line">            nodeTwin = minPQTwin.delMin();</span><br><span class="line">            board = node.board;</span><br><span class="line">            boardTwin = nodeTwin.board;</span><br><span class="line">            if (board.isGoal()) &#123;</span><br><span class="line">                isSolvable = true;</span><br><span class="line">                boards.push(board);</span><br><span class="line">                while (node.previous != null) &#123;</span><br><span class="line">                    node = node.previous;</span><br><span class="line">                    boards.push(node.board);</span><br><span class="line">                &#125;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            if (boardTwin.isGoal()) &#123;</span><br><span class="line">                isSolvable = false;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            node.moves++;</span><br><span class="line">            nodeTwin.moves++;</span><br><span class="line"></span><br><span class="line">            Iterable&lt;Board&gt; neighbors = board.neighbors();</span><br><span class="line">            for (Board b : neighbors) &#123;</span><br><span class="line">                if (node.previous != null &amp;&amp; node.previous.board.equals(b)) &#123;</span><br><span class="line">                    continue;</span><br><span class="line">                &#125;</span><br><span class="line">                minPQ.insert(new SearchNode(b, node.moves, node));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Iterable&lt;Board&gt; neighborsTwin = boardTwin.neighbors();</span><br><span class="line">            for (Board b : neighborsTwin) &#123;</span><br><span class="line">                if (nodeTwin.previous != null &amp;&amp; nodeTwin.previous.board.equals(b)) &#123;</span><br><span class="line">                    continue;</span><br><span class="line">                &#125;</span><br><span class="line">                minPQTwin.insert(new SearchNode(b, nodeTwin.moves, nodeTwin));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // is the initial board solvable?</span><br><span class="line">    public boolean isSolvable() &#123;</span><br><span class="line">        return isSolvable;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // min number of moves to solve initial board; -1 if unsolvable</span><br><span class="line">    public int moves() &#123;</span><br><span class="line">        if (isSolvable) &#123;</span><br><span class="line">            return boards.size() - 1;</span><br><span class="line">        &#125;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // sequence of boards in a shortest solution; null if unsolvable</span><br><span class="line">    public Iterable&lt;Board&gt; solution() &#123;</span><br><span class="line">        if (isSolvable) &#123;</span><br><span class="line">            return boards;</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private class SearchNode implements Comparable&lt;SearchNode&gt; &#123;</span><br><span class="line">        private Board board;</span><br><span class="line">        private int moves;</span><br><span class="line">        private SearchNode previous;</span><br><span class="line">        private int cachedPriority = -1;</span><br><span class="line"></span><br><span class="line">        public SearchNode(Board board, int moves, SearchNode previous) &#123;</span><br><span class="line">            this.board = board;</span><br><span class="line">            this.moves = moves;</span><br><span class="line">            this.previous = previous;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        private int priority() &#123;</span><br><span class="line">            if (cachedPriority == -1) &#123;</span><br><span class="line">                cachedPriority = board.manhattan() + moves;</span><br><span class="line">            &#125;</span><br><span class="line">            return cachedPriority;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public int compareTo(SearchNode that) &#123;</span><br><span class="line">            return Integer.compare(this.priority(), that.priority());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // solve a slider puzzle (given below)</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // create initial board from file</span><br><span class="line">        In in = new In(args[0]);</span><br><span class="line">        int n = in.readInt();</span><br><span class="line">        int[][] blocks = new int[n][n];</span><br><span class="line">        for (int i = 0; i &lt; n; i++)</span><br><span class="line">            for (int j = 0; j &lt; n; j++)</span><br><span class="line">                blocks[i][j] = in.readInt();</span><br><span class="line">        Board initial = new Board(blocks);</span><br><span class="line"></span><br><span class="line">        // solve the puzzle</span><br><span class="line">        Solver solver = new Solver(initial);</span><br><span class="line"></span><br><span class="line">        // print solution to standard output</span><br><span class="line">        if (!solver.isSolvable())</span><br><span class="line">            StdOut.println(&quot;No solution possible&quot;);</span><br><span class="line">        else &#123;</span><br><span class="line">            StdOut.println(&quot;Minimum number of moves = &quot; + solver.moves());</span><br><span class="line">            for (Board board : solver.solution())</span><br><span class="line">                StdOut.println(board);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上，8Puzzle实现完成。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;8Puzzle问题算法使用&lt;code&gt;A*算法&lt;/code&gt;，数据结构主要是&lt;code&gt;优先队列&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Algorithms" scheme="http://www.peierlong.com/categories/Algorithms/"/>
    
    
      <category term="Algorithms" scheme="http://www.peierlong.com/tags/Algorithms/"/>
    
  </entry>
  
</feed>
